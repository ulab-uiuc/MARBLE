coordinate_mode: graph
relationships:
- - agent1
  - agent2
  - collaborate with
- - agent1
  - agent3
  - collaborate with
- - agent1
  - agent4
  - collaborate with
- - agent1
  - agent5
  - collaborate with
- - agent2
  - agent3
  - collaborate with
- - agent2
  - agent4
  - collaborate with
- - agent2
  - agent5
  - collaborate with
- - agent3
  - agent4
  - collaborate with
- - agent3
  - agent5
  - collaborate with
- - agent4
  - agent5
  - collaborate with
llm: fireworks_ai/accounts/fireworks/models/llama-v3p3-70b-instruct
environment:
  type: DB
  name: DB Simulation Environment
  max_iterations: 5
  init_sql: "-- 1. Customers table (stores information about customers)\nCREATE TABLE\
    \ customers (\n    customer_id SERIAL PRIMARY KEY,  -- Unique customer ID\n  \
    \  company_name VARCHAR(255) NOT NULL,  -- Customer company name\n    contact_name\
    \ VARCHAR(100),  -- Customer contact person\n    contact_email VARCHAR(255) UNIQUE\
    \ NOT NULL,  -- Customer contact email\n    phone VARCHAR(20),  -- Customer contact\
    \ phone number\n    address VARCHAR(255),  -- Customer address\n    created_at\
    \ TIMESTAMP DEFAULT CURRENT_TIMESTAMP  -- Customer registration time\n);\n\n--\
    \ 2. Products table (stores details of products)\nCREATE TABLE products (\n  \
    \  product_id SERIAL PRIMARY KEY,  -- Unique product ID\n    product_name VARCHAR(255)\
    \ NOT NULL,  -- Product name\n    description TEXT,  -- Product description\n\
    \    price DECIMAL(10, 2) NOT NULL,  -- Product price\n    category VARCHAR(100),\
    \  -- Product category (e.g., electronics, machinery)\n    stock_quantity INT\
    \ NOT NULL,  -- Available stock quantity\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\
    \  -- Product creation time\n);\n\n-- 3. Suppliers table (stores information about\
    \ suppliers)\nCREATE TABLE suppliers (\n    supplier_id SERIAL PRIMARY KEY,  --\
    \ Unique supplier ID\n    company_name VARCHAR(255) NOT NULL,  -- Supplier company\
    \ name\n    contact_name VARCHAR(100),  -- Supplier contact person\n    contact_email\
    \ VARCHAR(255) UNIQUE NOT NULL,  -- Supplier contact email\n    phone VARCHAR(20),\
    \  -- Supplier contact phone number\n    address VARCHAR(255),  -- Supplier address\n\
    \    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP  -- Supplier registration\
    \ time\n);\n\n-- 4. Orders table (stores orders made by customers)\nCREATE TABLE\
    \ orders (\n    order_id SERIAL PRIMARY KEY,  -- Unique order ID\n    customer_id\
    \ INT REFERENCES customers(customer_id),  -- Foreign key to customers\n    order_date\
    \ TIMESTAMP DEFAULT CURRENT_TIMESTAMP,  -- Date of order\n    status VARCHAR(50)\
    \ DEFAULT 'pending',  -- Order status (e.g., pending, completed)\n    total_amount\
    \ DECIMAL(10, 2)  -- Total amount of the order\n);\n\n-- 5. Order_Items table\
    \ (stores details of items in each order)\nCREATE TABLE order_items (\n    order_item_id\
    \ SERIAL PRIMARY KEY,  -- Unique order item ID\n    order_id INT REFERENCES orders(order_id),\
    \  -- Foreign key to orders\n    product_id INT REFERENCES products(product_id),\
    \  -- Foreign key to products\n    quantity INT NOT NULL,  -- Quantity of the\
    \ product ordered\n    price DECIMAL(10, 2) NOT NULL  -- Price of the product\
    \ at the time of the order\n);\n\n-- 6. Inventory table (tracks inventory movements)\n\
    CREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,  -- Unique inventory\
    \ ID\n    product_id INT REFERENCES products(product_id),  -- Foreign key to products\n\
    \    quantity_in INT NOT NULL,  -- Quantity added to inventory\n    quantity_out\
    \ INT NOT NULL,  -- Quantity removed from inventory\n    transaction_date TIMESTAMP\
    \ DEFAULT CURRENT_TIMESTAMP  -- Date of inventory transaction\n);\n\n-- 7. Manufacturing_Orders\
    \ table (stores details of manufacturing orders)\nCREATE TABLE manufacturing_orders\
    \ (\n    manufacturing_order_id SERIAL PRIMARY KEY,  -- Unique manufacturing order\
    \ ID\n    product_id INT REFERENCES products(product_id),  -- Foreign key to products\n\
    \    quantity INT NOT NULL,  -- Quantity to be manufactured\n    due_date TIMESTAMP,\
    \  -- Due date for manufacturing completion\n    status VARCHAR(50) DEFAULT 'pending'\
    \  -- Manufacturing order status\n);\n\n-- 8. Raw_Materials table (stores raw\
    \ materials used in manufacturing)\nCREATE TABLE raw_materials (\n    material_id\
    \ SERIAL PRIMARY KEY,  -- Unique material ID\n    material_name VARCHAR(255) NOT\
    \ NULL,  -- Material name\n    description TEXT,  -- Material description\n  \
    \  unit_price DECIMAL(10, 2),  -- Price per unit of material\n    stock_quantity\
    \ INT NOT NULL  -- Available stock quantity of material\n);\n\n-- 9. Manufacturing_Inventory\
    \ table (tracks raw material usage in manufacturing)\nCREATE TABLE manufacturing_inventory\
    \ (\n    manufacturing_inventory_id SERIAL PRIMARY KEY,  -- Unique ID\n    material_id\
    \ INT REFERENCES raw_materials(material_id),  -- Foreign key to raw materials\n\
    \    quantity_used INT NOT NULL,  -- Quantity of material used\n    manufacturing_order_id\
    \ INT REFERENCES manufacturing_orders(manufacturing_order_id),  -- Foreign key\
    \ to manufacturing orders\n    transaction_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP\
    \  -- Date of transaction\n);\n\n-- 10. Payments table (stores payments made by\
    \ customers)\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,  --\
    \ Unique payment ID\n    order_id INT REFERENCES orders(order_id),  -- Foreign\
    \ key to orders\n    payment_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,  -- Payment\
    \ date\n    amount DECIMAL(10, 2) NOT NULL,  -- Payment amount\n    payment_method\
    \ VARCHAR(50),  -- Payment method (e.g., credit card, bank transfer)\n    status\
    \ VARCHAR(50) DEFAULT 'completed'  -- Payment status\n);\n\n-- Insert sample customers\n\
    INSERT INTO customers (company_name, contact_name, contact_email, phone, address)\n\
    VALUES \n('Acme Corp', 'John Doe', 'johndoe@acmecorp.com', '123-456-7890', '123\
    \ Elm St'),\n('Beta Industries', 'Jane Smith', 'janesmith@betaind.com', '987-654-3210',\
    \ '456 Oak St');\n\n-- Insert sample products\nINSERT INTO products (product_name,\
    \ description, price, stock_quantity)\nVALUES \n('Widget A', 'High-quality widget',\
    \ 25.99, 100),\n('Widget B', 'Standard widget', 15.99, 200);\n\n-- Insert sample\
    \ suppliers\nINSERT INTO suppliers (company_name, contact_name, contact_email,\
    \ phone, address)\nVALUES \n('SupplyCo', 'Alice Brown', 'alice@supplyco.com',\
    \ '123-111-2222', '789 Pine St'),\n('PartsPlus', 'Bob Green', 'bob@partsplus.com',\
    \ '321-654-9870', '101 Maple St');\n\n-- Insert sample orders\nINSERT INTO orders\
    \ (customer_id, order_date, status, total_amount)\nVALUES \n(1, '2024-12-01',\
    \ 'pending', 51.98),\n(2, '2024-12-02', 'completed', 31.98);\n\n-- Insert sample\
    \ order items\nINSERT INTO order_items (order_id, product_id, quantity, price)\n\
    VALUES \n(1, 1, 2, 25.99),\n(2, 2, 2, 15.99);\n\n-- Insert sample inventory transactions\n\
    INSERT INTO inventory (product_id, quantity_in, quantity_out)\nVALUES \n(1, 100,\
    \ 0),\n(2, 200, 50);\n\n-- Insert sample manufacturing orders\nINSERT INTO manufacturing_orders\
    \ (product_id, quantity, due_date, status)\nVALUES \n(1, 50, '2024-12-15', 'pending'),\n\
    (2, 100, '2024-12-20', 'completed');\n\n-- Insert raw materials\nINSERT INTO raw_materials\
    \ (material_name, description, unit_price, stock_quantity)\nVALUES \n('Steel',\
    \ 'Raw steel for widgets', 5.50, 500),\n('Plastic', 'Plastic for widget casing',\
    \ 2.00, 300);\n\n-- Insert sample manufacturing inventory transactions\nINSERT\
    \ INTO manufacturing_inventory (material_id, quantity_used, manufacturing_order_id)\n\
    VALUES \n(1, 250, 1),\n(2, 200, 2);\n\n-- Insert sample payments\nINSERT INTO\
    \ payments (order_id, amount, payment_method, status)\nVALUES \n(1, 51.98, 'Credit\
    \ Card', 'completed'),\n(2, 31.98, 'Bank Transfer', 'completed');\n\n-- Select\
    \ all orders for a customer\nSELECT * FROM orders WHERE customer_id = 1;\n\n--\
    \ Select all products in an order\nSELECT oi.order_item_id, p.product_name, oi.quantity,\
    \ oi.price\nFROM order_items oi\nJOIN products p ON oi.product_id = p.product_id\n\
    WHERE oi.order_id = 1;\n\n-- Select inventory details for a product\nSELECT *\
    \ FROM inventory WHERE product_id = 1;\n\n-- Select manufacturing orders and their\
    \ materials used\nSELECT mo.manufacturing_order_id, p.product_name, mi.quantity_used,\
    \ rm.material_name\nFROM manufacturing_orders mo\nJOIN products p ON mo.product_id\
    \ = p.product_id\nJOIN manufacturing_inventory mi ON mo.manufacturing_order_id\
    \ = mi.manufacturing_order_id\nJOIN raw_materials rm ON mi.material_id = rm.material_id;\n\
    \n-- Select payment details for an order\nSELECT * FROM payments WHERE order_id\
    \ = 1;\n"
  anomalies:
  - anomaly: REDUNDANT_INDEX
    threads: 100
    ncolumn: 20
    nrow: 20000
    colsize: 100
  - anomaly: VACUUM
    threads: 100
    ncolumn: 20
    nrow: 20000
    colsize: 100
communication: false
task:
  content: 'This database is used for a Manufacturing system that tracks customers,
    products, suppliers, orders, inventory, raw materials, manufacturing orders, and
    payments. It includes relationships between orders, manufacturing, and inventory
    management to ensure smooth manufacturing operations.

    Recently, during operation, the database has seen performance issues. Use sql
    queries to find out what is wrong, and find out the reason that caused it. The
    root cause can be only three of the following: ''INSERT_LARGE_DATA'', ''MISSING_INDEXES'',
    ''LOCK_CONTENTION'', ''VACUUM'', ''REDUNDANT_INDEX'', ''FETCH_LARGE_DATA'', ''POOR_JOIN_PERFORMANCE,CPU_CONTENTION''.
    The planner should assign different agent to analyze possbility for each root
    cause and make final decision. Agents can also chat with each other to share information.  Please
    make the decision after using all these tools, as a premature decision may lead
    to incorrect conclusions.

    '
  output_format: "Please make the decision after exploring all rootcauses, as a premature\
    \ decision may lead to incorrect conclusions.\nPlease choose the most likely cause\
    \ of the database anomaly from the following list, based on the expert agents:\
    \ \n'INSERT_LARGE_DATA', 'LOCK_CONTENTION', 'VACUUM', 'REDUNDANT_INDEX', 'FETCH_LARGE_DATA'\n\
    You can ONLY CHOOSE three.\nYou have access to the Database, and you can perform\
    \ queries to get the required information. Agents can also chat with each other\
    \ to share information.\nThese tables include:\n- `pg_stat_statements` (for detailed\
    \ query stats)\n- `pg_locks` (for lock waits and contention)\n- `pg_stat_user_indexes`\
    \ (for index usage)\n- `pg_indexes` (for index definitions)\n- `pg_stat_all_tables`\
    \ (detailed statistics about vacuuming, auto vacuuming, and analyze operations\
    \ for each table)\n- `pg_stat_progress_vacuum` (for vacuum progress)\n- `pg_stat_user_tables`\
    \ (for dead tuples and vacuum stats)\n"
  labels:
  - INSERT_LARGE_DATA
  - LOCK_CONTENTION
  - VACUUM
  - REDUNDANT_INDEX
  - FETCH_LARGE_DATA
  root_causes:
  - REDUNDANT_INDEX
  - VACUUM
  number_of_labels_pred: 3
agents:
- type: BaseAgent
  agent_id: agent1
  profile: 'agent1 will explore the possibility of INSERT_LARGE_DATA as a root cause.
    Recommended tables: `pg_stat_statements`. You can search for INSERTs.'
- type: BaseAgent
  agent_id: agent2
  profile: 'agent2 will explore the possibility of LOCK_CONTENTION as a root cause.
    Recommended tables: `pg_locks`.'
- type: BaseAgent
  agent_id: agent3
  profile: 'agent3 will explore the possibility of VACUUM as a root cause. Recommended
    to search for inappropiate VACUUMs from `pg_stat_all_tables`: SELECT query, calls,
    total_plan_time, rows, mean_plan_time FROM pg_stat_statements WHERE query LIKE
    ''VACUUM%'';'
- type: BaseAgent
  agent_id: agent4
  profile: 'agent4 will explore the possibility of REDUNDANT_INDEX as a root cause.
    Recommended tables: `pg_stat_user_indexes`, `pg_indexes`.'
- type: BaseAgent
  agent_id: agent5
  profile: agent5 will explore the possibility of FETCH_LARGE_DATA as a root cause.
    Recommended to search for SELECTs from `pg_stat_statements`.
memory:
  type: SharedMemory
metrics:
  accuracy: true
  response_time: true
output:
  file_path: result/result_llama-3.3-70b/MANUFACTURING_REDUNDANT_INDEX_VACUUM_RESULT.json
engine_planner:
  initial_progress: Starting the simulation.
