coordinate_mode: star
relationships: []
llm: "gpt-4o-mini"

environment:
  type: DB
  name: "DB Simulation Environment"
  max_iterations: 5
  init_sql: |
    CREATE TABLE subscribers (
      subscriber_id SERIAL PRIMARY KEY,
      full_name VARCHAR(255) NOT NULL,
      phone_number VARCHAR(20) UNIQUE NOT NULL,
      plan_type VARCHAR(100) NOT NULL,
      registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
    
    CREATE TABLE network_usage (
      usage_id SERIAL PRIMARY KEY,
      subscriber_id INTEGER REFERENCES subscribers(subscriber_id),
      data_usage BIGINT NOT NULL,
      call_duration INTEGER NOT NULL,
      timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
    
    CREATE TABLE billing_records (
      bill_id SERIAL PRIMARY KEY,
      subscriber_id INTEGER REFERENCES subscribers(subscriber_id),
      amount DECIMAL(10, 2) NOT NULL,
      billing_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      due_date TIMESTAMP,
      status VARCHAR(50) NOT NULL
    );

    -- Insert sample data into subscribers table
    INSERT INTO subscribers (full_name, phone_number, plan_type) VALUES
    ('John Doe', '1234567890', 'Premium'),
    ('Jane Smith', '0987654321', 'Basic'),
    ('Alice Johnson', '5555555555', 'Standard'),
    ('Bob Brown', '1112223333', 'Premium'),
    ('Carol White', '4445556666', 'Basic'),
    ('David Green', '7778889999', 'Standard'),
    ('Eva Black', '2223334444', 'Premium'),
    ('Frank Blue', '6667778888', 'Basic'),
    ('Grace Yellow', '9990001111', 'Standard'),
    ('Hank Purple', '3334445555', 'Premium');

    -- Insert sample data into network_usage table
    INSERT INTO network_usage (subscriber_id, data_usage, call_duration) VALUES
    (1, 1024, 60),
    (2, 2048, 120),
    (3, 512, 30),
    (4, 4096, 240),
    (5, 1024, 60),
    (6, 3072, 180),
    (7, 2048, 90),
    (8, 1024, 45),
    (9, 512, 20),
    (10, 4096, 300);

    -- Insert sample data into billing_records table
    INSERT INTO billing_records (subscriber_id, amount, billing_date, due_date, status) VALUES
    (1, 50.00, '2023-01-01 00:00:00', '2023-01-15 00:00:00', 'Paid'),
    (2, 30.00, '2023-01-01 00:00:00', '2023-01-15 00:00:00', 'Unpaid'),
    (3, 40.00, '2023-01-01 00:00:00', '2023-01-15 00:00:00', 'Paid'),
    (4, 60.00, '2023-01-01 00:00:00', '2023-01-15 00:00:00', 'Unpaid'),
    (5, 20.00, '2023-01-01 00:00:00', '2023-01-15 00:00:00', 'Paid'),
    (6, 70.00, '2023-01-01 00:00:00', '2023-01-15 00:00:00', 'Unpaid'),
    (7, 80.00, '2023-01-01 00:00:00', '2023-01-15 00:00:00', 'Paid'),
    (8, 90.00, '2023-01-01 00:00:00', '2023-01-15 00:00:00', 'Unpaid'),
    (9, 100.00, '2023-01-01 00:00:00', '2023-01-15 00:00:00', 'Paid'),
    (10, 110.00, '2023-01-01 00:00:00', '2023-01-15 00:00:00', 'Unpaid');

  anomalies:  
    - anomaly: MISSING_INDEXES
      threads: 100
      ncolumn: 20
      nrow:    20000
      colsize: 100

communication: False

task:
  content: |
    The sysbench database tracks subscribers, network usage, and billing records. 
    Recently, during operation, the database monitoring system has triggered an alert. Analyze the database alerts & outputs and find out the reason that caused it. The root cause can be only one of the following: 'Sync Commits', 'Many Inserts', 'High Updates', 'Many Deletes', 'Index Missing', 'Redundant Indexes', 'Large Data Insert', 'Large Data Fetch', 'Poor Join Performance', 'Correlated Subquery'. The planner should ask different experts to work on the same task, and summarize their opinions into a final prediction. Please make the decision after using all these tools, as a premature decision may lead to incorrect conclusions.
  
  output_format: |
    Please make the decision after using all these tools, as a premature decision may lead to incorrect conclusions.
    Please choose the most likely cause of the database anomaly from the following list, based on the expert agents: 
    'INSERT_LARGE_DATA', 'MISSING_INDEXES', 'LOCK_CONTENTION', 'VACUUM', 'REDUNDANT_INDEX', 'INSERT_LARGE_DATA,IO_CONTENTION', 'FETCH_LARGE_DATA,CORRELATED_SUBQUERY', 'POOR_JOIN_PERFORMANCE,CPU_CONTENTION'
    You can ONLY CHOOSE THREE.
    Please make the decision after using all these tools, as a premature decision may lead to incorrect conclusions.
    These functions include:

    get_alerts_handler:
      Retrieves and formats current alerts from Prometheus, returning detailed information about each alert, including name, severity, description, state, active since, and value.

    detect_metric_abnormality_handler:
      Checks for anomalies in a specified metric using data from the last 10 minutes. It maps the metric name, retrieves the data, and uses a statistical method to identify abnormalities.

    get_alert_metrics_handler:
      Retrieves metrics related to current alerts and returns a detailed explanation of the alert metrics.

    get_rag_handler:
      Retrieves relevant knowledge from the Retrieval-Augmented Generation (RAG) system based on the expert and metric name, and returns an explanation.

    get_slow_query_handler:
      Retrieves information about the slowest queries executed in the database and returns an explanation. output_format: |

  labels: 
    - 'INSERT_LARGE_DATA'
    - 'MISSING_INDEXES'
    - 'LOCK_CONTENTION'
    - 'VACUUM'
    - 'REDUNDANT_INDEX'
    - 'INSERT_LARGE_DATA,IO_CONTENTION'
    - 'FETCH_LARGE_DATA,CORRELATED_SUBQUERY'
    - 'POOR_JOIN_PERFORMANCE,CPU_CONTENTION'
  root_causes: 
    - 'MISSING_INDEXES'
  number_of_labels_pred: 3

agents:
  - type: BaseAgent
    agent_id: agent1
    profile: "agent1 is a ConfigurationExpert that specializes in system configurations and optimizations."
  - type: BaseAgent
    agent_id: agent2
    profile: "agent2 is a CpuExpert that specializes in CPU architecture, performance, and optimizations."
  - type: BaseAgent
    agent_id: agent3
    profile: "agent3 is a WorkloadExpert that specializes in analyzing workloads, resource allocation, and optimization for efficiency."
  - type: BaseAgent
    agent_id: agent4
    profile: "agent4 is a DiskExpert that specializes in disk I/O, storage, and optimization for performance."
  - type: BaseAgent
    agent_id: agent5
    profile: "agent5 is a QueryExpert that specializes in query optimization, indexing, and performance tuning."

memory:
  type: SharedMemory

metrics: 
  accuracy: true
  response_time: true

output:
  file_path: "result/EDUCATION_MISSING_INDEXES_RESULT.json"

engine_planner:
  initial_progress: "Starting the simulation."