coordinate_mode: star
relationships: []
llm: "gpt-4o-mini"

environment:
  type: DB
  name: "DB Simulation Environment"
  max_iterations: 5
  init_sql: |
    CREATE TABLE patients (
      patient_id SERIAL PRIMARY KEY,
      full_name VARCHAR(255) NOT NULL,
      date_of_birth DATE NOT NULL,
      medical_record_number VARCHAR(50) UNIQUE NOT NULL,
      insurance_provider VARCHAR(255),
      contact_number VARCHAR(20),
      email VARCHAR(255),
      address TEXT
    );
    
    CREATE TABLE medical_records (
      record_id SERIAL PRIMARY KEY,
      patient_id INTEGER REFERENCES patients(patient_id),
      diagnosis TEXT NOT NULL,
      treatment TEXT,
      admission_date TIMESTAMP NOT NULL,
      discharge_date TIMESTAMP,
      attending_physician VARCHAR(255),
      notes TEXT
    );
    
    CREATE TABLE medical_tests (
      test_id SERIAL PRIMARY KEY,
      patient_id INTEGER REFERENCES patients(patient_id),
      test_type VARCHAR(255) NOT NULL,
      test_result TEXT,
      performed_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      lab_technician VARCHAR(255),
      test_notes TEXT
    );

    INSERT INTO patients (full_name, date_of_birth, medical_record_number, insurance_provider, contact_number, email, address) VALUES
    ('John Doe', '1980-05-15', 'MRN001', 'HealthPlus', '123-456-7890', 'john.doe@example.com', '123 Elm Street, Springfield'),
    ('Jane Smith', '1975-11-22', 'MRN002', 'WellCare', '234-567-8901', 'jane.smith@example.com', '456 Oak Avenue, Metropolis'),
    ('Mike Johnson', '1990-03-10', 'MRN003', 'CareFirst', '345-678-9012', 'mike.johnson@example.com', '789 Pine Road, Gotham'),
    ('Emily Brown', '1985-07-18', 'MRN004', 'MediHealth', '456-789-0123', 'emily.brown@example.com', '101 Maple Lane, Star City'),
    ('David Wilson', '1995-09-30', 'MRN005', 'PrimeCare', '567-890-1234', 'david.wilson@example.com', '202 Birch Boulevard, Central City');

    INSERT INTO medical_records (patient_id, diagnosis, treatment, admission_date, discharge_date, attending_physician, notes) VALUES
    (1, 'Hypertension', 'Medication', '2023-01-01 08:00:00', '2023-01-05 10:00:00', 'Dr. Alice Green', 'Patient responded well to medication.'),
    (2, 'Diabetes', 'Insulin Therapy', '2023-02-10 09:30:00', '2023-02-15 11:45:00', 'Dr. Bob White', 'Patient needs regular follow-up.'),
    (3, 'Asthma', 'Inhaler', '2023-03-20 14:00:00', '2023-03-25 16:30:00', 'Dr. Carol Black', 'Patient showed improvement.'),
    (4, 'Fracture', 'Surgery', '2023-04-05 07:45:00', '2023-04-10 09:15:00', 'Dr. David Blue', 'Surgery was successful.'),
    (5, 'Migraine', 'Pain Relief', '2023-05-15 10:00:00', '2023-05-20 12:30:00', 'Dr. Eve Red', 'Patient advised to avoid triggers.');

    INSERT INTO medical_tests (patient_id, test_type, test_result, performed_date, lab_technician, test_notes) VALUES
    (1, 'Blood Test', 'Normal', '2023-01-02 08:30:00', 'Technician A', 'No abnormalities detected.'),
    (2, 'X-Ray', 'Fracture detected', '2023-02-11 10:00:00', 'Technician B', 'Fracture in left arm.'),
    (3, 'MRI', 'Clear', '2023-03-21 15:00:00', 'Technician C', 'No issues found.'),
    (4, 'CT Scan', 'Normal', '2023-04-06 08:45:00', 'Technician D', 'No abnormalities detected.'),
    (5, 'Urine Test', 'Infection detected', '2023-05-16 11:00:00', 'Technician E', 'Signs of infection present.');

  anomalies:  
    - anomaly: FETCH_LARGE_DATA,CORRELATED_SUBQUERY
      threads: 100
      ncolumn: 20
      nrow:    20000
      colsize: 100

communication: False

task:
  content: |
    The sysbench database manages patient records, medical tests, and diagnostic information. 
    Recently, during operation, the database monitoring system has triggered an alert. Analyze the database alerts & outputs and find out the reason that caused it. The root cause can be only one of the following: 'Sync Commits', 'Many Inserts', 'High Updates', 'Many Deletes', 'Index Missing', 'Redundant Indexes', 'Large Data Insert', 'Large Data Fetch', 'Poor Join Performance', 'Correlated Subquery'. The planner should ask different experts to work on the same task, and summarize their opinions into a final prediction. Please make the decision after using all these tools, as a premature decision may lead to incorrect conclusions.
    
  output_format: |
    Please make the decision after using all these tools, as a premature decision may lead to incorrect conclusions.
    Please choose the most likely cause of the database anomaly from the following list, based on the expert agents: 
    'INSERT_LARGE_DATA', 'FETCH_LARGE_DATA,CORRELATED_SUBQUERY', 'LOCK_CONTENTION', 'VACUUM', 'REDUNDANT_INDEX', 'INSERT_LARGE_DATA,IO_CONTENTION', 'FETCH_LARGE_DATA,CORRELATED_SUBQUERY', 'POOR_JOIN_PERFORMANCE,CPU_CONTENTION'
    You can ONLY CHOOSE THREE.
    Please make the decision after using all these tools, as a premature decision may lead to incorrect conclusions.
    These functions include:

    get_alerts_handler:
      Retrieves and formats current alerts from Prometheus, returning detailed information about each alert, including name, severity, description, state, active since, and value.

    detect_metric_abnormality_handler:
      Checks for anomalies in a specified metric using data from the last 10 minutes. It maps the metric name, retrieves the data, and uses a statistical method to identify abnormalities.

    get_alert_metrics_handler:
      Retrieves metrics related to current alerts and returns a detailed explanation of the alert metrics.

    get_rag_handler:
      Retrieves relevant knowledge from the Retrieval-Augmented Generation (RAG) system based on the expert and metric name, and returns an explanation.

    get_slow_query_handler:
      Retrieves information about the slowest queries executed in the database and returns an explanation. output_format: |

  labels: 
    - 'INSERT_LARGE_DATA'
    - 'FETCH_LARGE_DATA,CORRELATED_SUBQUERY'
    - 'LOCK_CONTENTION'
    - 'VACUUM'
    - 'REDUNDANT_INDEX'
    - 'INSERT_LARGE_DATA,IO_CONTENTION'
    - 'FETCH_LARGE_DATA,CORRELATED_SUBQUERY'
    - 'POOR_JOIN_PERFORMANCE,CPU_CONTENTION'
  root_causes: 
    - 'FETCH_LARGE_DATA,CORRELATED_SUBQUERY'
  number_of_labels_pred: 3

agents:
  - type: BaseAgent
    agent_id: agent1
    profile: "agent1 is a ConfigurationExpert that specializes in system configurations and optimizations."
  - type: BaseAgent
    agent_id: agent2
    profile: "agent2 is a CpuExpert that specializes in CPU architecture, performance, and optimizations."
  - type: BaseAgent
    agent_id: agent3
    profile: "agent3 is a WorkloadExpert that specializes in analyzing workloads, resource allocation, and optimization for efficiency."
  - type: BaseAgent
    agent_id: agent4
    profile: "agent4 is a DiskExpert that specializes in disk I/O, storage, and optimization for performance."
  - type: BaseAgent
    agent_id: agent5
    profile: "agent5 is a QueryExpert that specializes in query optimization, indexing, and performance tuning."

memory:
  type: SharedMemory

metrics: 
  accuracy: true
  response_time: true

output:
  file_path: "result/HEALTH_CARE_FETCH_LARGE_DATA,CORRELATED_SUBQUERY_RESULT.json"

engine_planner:
  initial_progress: "Starting the simulation."