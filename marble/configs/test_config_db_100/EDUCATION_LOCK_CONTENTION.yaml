coordinate_mode: star
relationships: []
llm: "gpt-4o-mini"

environment:
  type: DB
  name: "DB Simulation Environment"
  max_iterations: 5
  init_sql: |
    CREATE TABLE students (
      student_id SERIAL PRIMARY KEY,
      full_name VARCHAR(255) NOT NULL,
      enrollment_date DATE NOT NULL,
      program VARCHAR(255) NOT NULL,
      academic_level VARCHAR(50) NOT NULL,
      email VARCHAR(255) UNIQUE NOT NULL,
      phone_number VARCHAR(20),
      address TEXT
    );
        
    CREATE TABLE courses (
      course_id SERIAL PRIMARY KEY,
      course_name VARCHAR(255) NOT NULL,
      department VARCHAR(255) NOT NULL,
      credits INTEGER NOT NULL,
      course_description TEXT,
      prerequisites TEXT
    );
        
    CREATE TABLE enrollments (
      enrollment_id SERIAL PRIMARY KEY,
      student_id INTEGER REFERENCES students(student_id),
      course_id INTEGER REFERENCES courses(course_id),
      semester VARCHAR(50) NOT NULL,
      grade VARCHAR(10),
      enrollment_date DATE NOT NULL,
      status VARCHAR(50) NOT NULL
    );

    CREATE TABLE professors (
      professor_id SERIAL PRIMARY KEY,
      full_name VARCHAR(255) NOT NULL,
      department VARCHAR(255) NOT NULL,
      email VARCHAR(255) UNIQUE NOT NULL,
      phone_number VARCHAR(20),
      office_address TEXT
    );

    CREATE TABLE course_professors (
      course_professor_id SERIAL PRIMARY KEY,
      course_id INTEGER REFERENCES courses(course_id),
      professor_id INTEGER REFERENCES professors(professor_id),
      semester VARCHAR(50) NOT NULL
    );

    INSERT INTO students (full_name, enrollment_date, program, academic_level, email, phone_number, address) VALUES
    ('Alex Rodriguez', '2022-09-01', 'Computer Science', 'Undergraduate', 'alex.rodriguez@example.com', '555-1234', '123 Elm St'),
    ('Maria Garcia', '2021-09-01', 'Biology', 'Graduate', 'maria.garcia@example.com', '555-5678', '456 Oak St'),
    ('Chen Wei', '2023-01-15', 'Engineering', 'Undergraduate', 'chen.wei@example.com', '555-8765', '789 Pine St'),
    ('Emma Thompson', '2020-09-01', 'Mathematics', 'PhD', 'emma.thompson@example.com', '555-4321', '101 Maple St'),
    ('Ahmed Hassan', '2022-01-15', 'Chemistry', 'Master', 'ahmed.hassan@example.com', '555-6789', '202 Birch St');

    INSERT INTO courses (course_name, department, credits, course_description, prerequisites) VALUES
    ('Introduction to Computer Science', 'Computer Science', 4, 'An introductory course to computer science concepts and programming.', 'None'),
    ('Advanced Biology', 'Biology', 3, 'A course on advanced topics in biology.', 'Basic Biology'),
    ('Engineering Mechanics', 'Engineering', 4, 'A course on the principles of mechanics in engineering.', 'Physics'),
    ('Abstract Algebra', 'Mathematics', 3, 'A course on algebraic structures such as groups, rings, and fields.', 'Linear Algebra'),
    ('Organic Chemistry', 'Chemistry', 4, 'A course on the structure, properties, and reactions of organic compounds.', 'General Chemistry');

    INSERT INTO professors (full_name, department, email, phone_number, office_address) VALUES
    ('Dr. John Smith', 'Computer Science', 'john.smith@example.com', '555-1111', 'CS Building, Room 101'),
    ('Dr. Jane Doe', 'Biology', 'jane.doe@example.com', '555-2222', 'Bio Building, Room 202'),
    ('Dr. Alan Turing', 'Engineering', 'alan.turing@example.com', '555-3333', 'Eng Building, Room 303'),
    ('Dr. Emmy Noether', 'Mathematics', 'emmy.noether@example.com', '555-4444', 'Math Building, Room 404'),
    ('Dr. Marie Curie', 'Chemistry', 'marie.curie@example.com', '555-5555', 'Chem Building, Room 505');

    INSERT INTO enrollments (student_id, course_id, semester, grade, enrollment_date, status) VALUES
    (1, 1, 'Fall 2022', 'A', '2022-09-01', 'Completed'),
    (2, 2, 'Spring 2022', 'B+', '2022-01-15', 'Completed'),
    (3, 3, 'Fall 2023', 'A-', '2023-01-15', 'Ongoing'),
    (4, 4, 'Fall 2020', 'A+', '2020-09-01', 'Completed'),
    (5, 5, 'Spring 2022', 'B', '2022-01-15', 'Completed');

    INSERT INTO course_professors (course_id, professor_id, semester) VALUES
    (1, 1, 'Fall 2022'),
    (2, 2, 'Spring 2022'),
    (3, 3, 'Fall 2023'),
    (4, 4, 'Fall 2020'),
    (5, 5, 'Spring 2022');

  anomalies:  
    - anomaly: LOCK_CONTENTION
      threads: 100
      ncolumn: 20
      nrow:    20000
      colsize: 100

communication: False

task:
  content: |
    The sysbench database tracks student enrollments, courses, and academic records. 
    Recently, during operation, the database monitoring system has triggered an alert. Analyze the database alerts & outputs and find out the reason that caused it. The root cause can be only one of the following: 'Sync Commits', 'Many Inserts', 'High Updates', 'Many Deletes', 'Index Missing', 'Redundant Indexes', 'Large Data Insert', 'Large Data Fetch', 'Poor Join Performance', 'Correlated Subquery'. The planner should ask different experts to work on the same task, and summarize their opinions into a final prediction. Please make the decision after using all these tools, as a premature decision may lead to incorrect conclusions.
  output_format: |
    Please make the decision after using all these tools, as a premature decision may lead to incorrect conclusions.
    Please choose the most likely cause of the database anomaly from the following list, based on the expert agents: 
    'INSERT_LARGE_DATA', 'LOCK_CONTENTION', 'LOCK_CONTENTION', 'VACUUM', 'REDUNDANT_INDEX', 'INSERT_LARGE_DATA,IO_CONTENTION', 'FETCH_LARGE_DATA,CORRELATED_SUBQUERY', 'POOR_JOIN_PERFORMANCE,CPU_CONTENTION'
    You can ONLY CHOOSE THREE.
    Please make the decision after using all these tools, as a premature decision may lead to incorrect conclusions.
    These functions include:

    get_alerts_handler:
      Retrieves and formats current alerts from Prometheus, returning detailed information about each alert, including name, severity, description, state, active since, and value.

    detect_metric_abnormality_handler:
      Checks for anomalies in a specified metric using data from the last 10 minutes. It maps the metric name, retrieves the data, and uses a statistical method to identify abnormalities.

    get_alert_metrics_handler:
      Retrieves metrics related to current alerts and returns a detailed explanation of the alert metrics.

    get_rag_handler:
      Retrieves relevant knowledge from the Retrieval-Augmented Generation (RAG) system based on the expert and metric name, and returns an explanation.

    get_slow_query_handler:
      Retrieves information about the slowest queries executed in the database and returns an explanation. output_format: |

  labels: 
    - 'INSERT_LARGE_DATA'
    - 'LOCK_CONTENTION'
    - 'LOCK_CONTENTION'
    - 'VACUUM'
    - 'REDUNDANT_INDEX'
    - 'INSERT_LARGE_DATA,IO_CONTENTION'
    - 'FETCH_LARGE_DATA,CORRELATED_SUBQUERY'
    - 'POOR_JOIN_PERFORMANCE,CPU_CONTENTION'
  root_causes: 
    - 'LOCK_CONTENTION'
  number_of_labels_pred: 3

agents:
  - type: BaseAgent
    agent_id: agent1
    profile: "agent1 is a ConfigurationExpert that specializes in system configurations and optimizations."
  - type: BaseAgent
    agent_id: agent2
    profile: "agent2 is a CpuExpert that specializes in CPU architecture, performance, and optimizations."
  - type: BaseAgent
    agent_id: agent3
    profile: "agent3 is a WorkloadExpert that specializes in analyzing workloads, resource allocation, and optimization for efficiency."
  - type: BaseAgent
    agent_id: agent4
    profile: "agent4 is a DiskExpert that specializes in disk I/O, storage, and optimization for performance."
  - type: BaseAgent
    agent_id: agent5
    profile: "agent5 is a QueryExpert that specializes in query optimization, indexing, and performance tuning."

memory:
  type: SharedMemory

metrics: 
  accuracy: true
  response_time: true

output:
  file_path: "result/EDUCATION_LOCK_CONTENTION_RESULT.json"

engine_planner:
  initial_progress: "Starting the simulation."