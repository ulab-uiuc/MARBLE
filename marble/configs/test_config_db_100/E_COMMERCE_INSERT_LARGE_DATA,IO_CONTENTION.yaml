coordinate_mode: star
relationships: []
llm: "gpt-4o-mini"

environment:
  type: DB
  name: "DB Simulation Environment"
  max_iterations: 5
  init_sql: |
    CREATE TABLE customers (
      customer_id SERIAL PRIMARY KEY,
      full_name VARCHAR(255) NOT NULL,
      email VARCHAR(255) UNIQUE NOT NULL,
      registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      last_login TIMESTAMP,
      account_status VARCHAR(50) NOT NULL
    );
    
    CREATE TABLE products (
      product_id SERIAL PRIMARY KEY,
      product_name VARCHAR(255) NOT NULL,
      category VARCHAR(100) NOT NULL,
      price DECIMAL(10,2) NOT NULL,
      stock_quantity INTEGER NOT NULL,
      last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
    
    CREATE TABLE orders (
      order_id SERIAL PRIMARY KEY,
      customer_id INTEGER REFERENCES customers(customer_id),
      order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      total_amount DECIMAL(10,2) NOT NULL,
      order_status VARCHAR(50) NOT NULL
    );
    
    CREATE TABLE order_items (
      order_item_id SERIAL PRIMARY KEY,
      order_id INTEGER REFERENCES orders(order_id),
      product_id INTEGER REFERENCES products(product_id),
      quantity INTEGER NOT NULL,
      item_price DECIMAL(10,2) NOT NULL
    );
    
    CREATE TABLE product_reviews (
      review_id SERIAL PRIMARY KEY,
      product_id INTEGER REFERENCES products(product_id),
      customer_id INTEGER REFERENCES customers(customer_id),
      rating INTEGER CHECK (rating >= 1 AND rating <= 5),
      review_text TEXT,
      review_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
    
    CREATE TABLE cart (
      cart_id SERIAL PRIMARY KEY,
      customer_id INTEGER REFERENCES customers(customer_id),
      product_id INTEGER REFERENCES products(product_id),
      quantity INTEGER NOT NULL,
      added_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
    
    CREATE TABLE product_inventory_logs (
      log_id SERIAL PRIMARY KEY,
      product_id INTEGER REFERENCES products(product_id),
      change_type VARCHAR(50) NOT NULL,
      quantity_changed INTEGER NOT NULL,
      log_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
    
    CREATE TABLE customer_activity_logs (
      log_id SERIAL PRIMARY KEY,
      customer_id INTEGER REFERENCES customers(customer_id),
      activity_type VARCHAR(100) NOT NULL,
      activity_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      additional_details TEXT
    );
    
    CREATE TABLE payment_transactions (
      transaction_id SERIAL PRIMARY KEY,
      order_id INTEGER REFERENCES orders(order_id),
      payment_method VARCHAR(50) NOT NULL,
      transaction_amount DECIMAL(10,2) NOT NULL,
      transaction_status VARCHAR(50) NOT NULL,
      transaction_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
    
    CREATE TABLE product_recommendations (
      recommendation_id SERIAL PRIMARY KEY,
      customer_id INTEGER REFERENCES customers(customer_id),
      recommended_product_id INTEGER REFERENCES products(product_id),
      recommendation_reason VARCHAR(255),
      recommended_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    INSERT INTO customers (full_name, email, account_status) VALUES
    ('John Doe', 'john.doe@email.com', 'Active'),
    ('Jane Smith', 'jane.smith@email.com', 'Active'),
    ('Mike Johnson', 'mike.johnson@email.com', 'Inactive'),
    ('Emily Brown', 'emily.brown@email.com', 'Active'),
    ('David Wilson', 'david.wilson@email.com', 'Active');

    INSERT INTO products (product_name, category, price, stock_quantity) VALUES
    ('Laptop', 'Electronics', 999.99, 50),
    ('Smartphone', 'Electronics', 599.99, 100),
    ('Headphones', 'Electronics', 199.99, 200),
    ('Tablet', 'Electronics', 349.99, 75),
    ('Smartwatch', 'Electronics', 249.99, 150);

    INSERT INTO orders (customer_id, total_amount, order_status) VALUES
    (1, 1199.98, 'Completed'),
    (2, 599.99, 'Processing'),
    (3, 449.98, 'Shipped'),
    (4, 799.97, 'Delivered'),
    (5, 299.99, 'Pending');

    INSERT INTO order_items (order_id, product_id, quantity, item_price) VALUES
    (1, 1, 1, 999.99),
    (1, 3, 1, 199.99),
    (2, 2, 1, 599.99),
    (3, 4, 1, 349.99),
    (3, 5, 1, 249.99);
  
    INSERT INTO product_reviews (product_id, customer_id, rating, review_text) VALUES
    (1, 1, 5, 'Excellent product, highly recommend!'),
    (2, 2, 4, 'Good value for money.'),
    (3, 3, 3, 'Average quality, could be better.'),
    (4, 4, 5, 'Fantastic tablet, very satisfied.'),
    (5, 5, 4, 'Great smartwatch, but battery life could be improved.');

    INSERT INTO cart (customer_id, product_id, quantity) VALUES
    (1, 2, 1),
    (2, 3, 2),
    (3, 1, 1),
    (4, 5, 1),
    (5, 4, 3);

    INSERT INTO product_inventory_logs (product_id, change_type, quantity_changed) VALUES
    (1, 'Restock', 20),
    (2, 'Sale', -10),
    (3, 'Restock', 50),
    (4, 'Sale', -5),
    (5, 'Restock', 30);

    INSERT INTO customer_activity_logs (customer_id, activity_type, additional_details) VALUES
    (1, 'Login', 'Logged in from IP 192.168.1.1'),
    (2, 'Purchase', 'Purchased 2 items'),
    (3, 'Review', 'Reviewed product ID 3'),
    (4, 'Cart Update', 'Added product ID 5 to cart'),
    (5, 'Logout', 'Logged out from IP 192.168.1.5');

    INSERT INTO payment_transactions (order_id, payment_method, transaction_amount, transaction_status) VALUES
    (1, 'Credit Card', 1199.98, 'Completed'),
    (2, 'PayPal', 599.99, 'Pending'),
    (3, 'Credit Card', 449.98, 'Completed'),
    (4, 'Debit Card', 799.97, 'Completed'),
    (5, 'Credit Card', 299.99, 'Failed');

    INSERT INTO product_recommendations (customer_id, recommended_product_id, recommendation_reason) VALUES
    (1, 3, 'Based on your previous purchase'),
    (2, 4, 'Customers who bought this also bought'),
    (3, 5, 'Recommended for you'),
    (4, 1, 'Top-rated product'),
    (5, 2, 'Frequently bought together');
      
  anomalies:  
    - anomaly: INSERT_LARGE_DATA,IO_CONTENTION
      threads: 100
      ncolumn: 20
      nrow:    20000
      colsize: 100

communication: False

task:
  content: |
    The sysbench database manages data for an E-commerce platform with multiple product categories, customer interactions, and transaction records. The database contains tables for customers, products, orders, and various logs. Recently, during peak shopping hours, the database monitoring system has triggered an alert. Analyze the database alerts & outputs and find out the reason that caused it. The root cause can be only one of the following: 'Sync Commits', 'Many Inserts', 'High Updates', 'Many Deletes', 'Index Missing', 'Redundant Indexes', 'Large Data Insert', 'Large Data Fetch', 'Poor Join Performance', 'Correlated Subquery'. The planner should ask different experts to work on the same task, and summarize their opinions into a final prediction.
    Recently, during operation, the database monitoring system has triggered an alert. Analyze the database alerts & outputs and find out the reason that caused it. The root cause can be only one of the following: 'Sync Commits', 'Many Inserts', 'High Updates', 'Many Deletes', 'Index Missing', 'Redundant Indexes', 'Large Data Insert', 'Large Data Fetch', 'Poor Join Performance', 'Correlated Subquery'. The planner should ask different experts to work on the same task, and summarize their opinions into a final prediction. Please make the decision after using all these tools, as a premature decision may lead to incorrect conclusions.
  output_format: |
    Please make the decision after using all these tools, as a premature decision may lead to incorrect conclusions.
    Please choose the most likely cause of the database anomaly from the following list, based on the expert agents: 
    'INSERT_LARGE_DATA', 'INSERT_LARGE_DATA,IO_CONTENTION', 'LOCK_CONTENTION', 'VACUUM', 'REDUNDANT_INDEX', 'INSERT_LARGE_DATA,IO_CONTENTION', 'FETCH_LARGE_DATA,CORRELATED_SUBQUERY', 'POOR_JOIN_PERFORMANCE,CPU_CONTENTION'
    You can ONLY CHOOSE THREE.
    Please make the decision after using all these tools, as a premature decision may lead to incorrect conclusions.
    These functions include:

    get_alerts_handler:
      Retrieves and formats current alerts from Prometheus, returning detailed information about each alert, including name, severity, description, state, active since, and value.

    detect_metric_abnormality_handler:
      Checks for anomalies in a specified metric using data from the last 10 minutes. It maps the metric name, retrieves the data, and uses a statistical method to identify abnormalities.

    get_alert_metrics_handler:
      Retrieves metrics related to current alerts and returns a detailed explanation of the alert metrics.

    get_rag_handler:
      Retrieves relevant knowledge from the Retrieval-Augmented Generation (RAG) system based on the expert and metric name, and returns an explanation.

    get_slow_query_handler:
      Retrieves information about the slowest queries executed in the database and returns an explanation. output_format: |

  labels: 
    - 'INSERT_LARGE_DATA'
    - 'INSERT_LARGE_DATA,IO_CONTENTION'
    - 'LOCK_CONTENTION'
    - 'VACUUM'
    - 'REDUNDANT_INDEX'
    - 'INSERT_LARGE_DATA,IO_CONTENTION'
    - 'FETCH_LARGE_DATA,CORRELATED_SUBQUERY'
    - 'POOR_JOIN_PERFORMANCE,CPU_CONTENTION'
  root_causes: 
    - 'INSERT_LARGE_DATA,IO_CONTENTION'
  number_of_labels_pred: 3

agents:
  - type: BaseAgent
    agent_id: agent1
    profile: "agent1 is a ConfigurationExpert that specializes in system configurations and optimizations."
  - type: BaseAgent
    agent_id: agent2
    profile: "agent2 is a CpuExpert that specializes in CPU architecture, performance, and optimizations."
  - type: BaseAgent
    agent_id: agent3
    profile: "agent3 is a WorkloadExpert that specializes in analyzing workloads, resource allocation, and optimization for efficiency."
  - type: BaseAgent
    agent_id: agent4
    profile: "agent4 is a DiskExpert that specializes in disk I/O, storage, and optimization for performance."
  - type: BaseAgent
    agent_id: agent5
    profile: "agent5 is a QueryExpert that specializes in query optimization, indexing, and performance tuning."

memory:
  type: SharedMemory

metrics: 
  accuracy: true
  response_time: true

output:
  file_path: "result/E_COMMERCE_INSERT_LARGE_DATA,IO_CONTENTION_RESULT.json"

engine_planner:
  initial_progress: "Starting the simulation."