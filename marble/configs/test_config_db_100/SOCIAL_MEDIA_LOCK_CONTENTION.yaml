coordinate_mode: star
relationships: []
llm: "gpt-4o-mini"

environment:
  type: DB
  name: "DB Simulation Environment"
  max_iterations: 5
  init_sql: |
    CREATE TABLE users (
      user_id SERIAL PRIMARY KEY,
      username VARCHAR(255) UNIQUE NOT NULL,
      email VARCHAR(255) UNIQUE NOT NULL,
      registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      last_active TIMESTAMP
    );
    
    CREATE TABLE posts (
      post_id SERIAL PRIMARY KEY,
      user_id INTEGER REFERENCES users(user_id),
      content TEXT NOT NULL,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      likes_count INTEGER DEFAULT 0,
      comments_count INTEGER DEFAULT 0,
      shares_count INTEGER DEFAULT 0
    );
    
    CREATE TABLE interactions (
      interaction_id SERIAL PRIMARY KEY,
      user_id INTEGER REFERENCES users(user_id),
      post_id INTEGER REFERENCES posts(post_id),
      interaction_type VARCHAR(50) NOT NULL,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    CREATE TABLE comments (
      comment_id SERIAL PRIMARY KEY,
      post_id INTEGER REFERENCES posts(post_id),
      user_id INTEGER REFERENCES users(user_id),
      content TEXT NOT NULL,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      likes_count INTEGER DEFAULT 0
    );

    CREATE TABLE followers (
      follower_id SERIAL PRIMARY KEY,
      user_id INTEGER REFERENCES users(user_id),
      follower_user_id INTEGER REFERENCES users(user_id),
      followed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    CREATE TABLE messages (
      message_id SERIAL PRIMARY KEY,
      sender_id INTEGER REFERENCES users(user_id),
      receiver_id INTEGER REFERENCES users(user_id),
      content TEXT NOT NULL,
      sent_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      read_at TIMESTAMP
    );

    INSERT INTO users (username, email, last_active) VALUES
    ('social_user1', 'user1@social.com', CURRENT_TIMESTAMP),
    ('social_user2', 'user2@social.com', CURRENT_TIMESTAMP),
    ('social_user3', 'user3@social.com', CURRENT_TIMESTAMP),
    ('social_user4', 'user4@social.com', CURRENT_TIMESTAMP),
    ('social_user5', 'user5@social.com', CURRENT_TIMESTAMP);

    INSERT INTO posts (user_id, content) VALUES
    (1, 'This is the first post by user1'),
    (2, 'This is the first post by user2'),
    (3, 'This is the first post by user3'),
    (4, 'This is the first post by user4'),
    (5, 'This is the first post by user5');

    INSERT INTO interactions (user_id, post_id, interaction_type) VALUES
    (1, 2, 'like'),
    (2, 3, 'comment'),
    (3, 4, 'share'),
    (4, 5, 'like'),
    (5, 1, 'comment');

    INSERT INTO comments (post_id, user_id, content) VALUES
    (2, 1, 'Great post!'),
    (3, 2, 'Interesting read.'),
    (4, 3, 'Thanks for sharing!'),
    (5, 4, 'Nice post!'),
    (1, 5, 'Good job!');

    INSERT INTO followers (user_id, follower_user_id) VALUES
    (1, 2),
    (2, 3),
    (3, 4),
    (4, 5),
    (5, 1);

    INSERT INTO messages (sender_id, receiver_id, content) VALUES
    (1, 2, 'Hello user2!'),
    (2, 3, 'Hi user3, how are you?'),
    (3, 4, 'Hey user4, long time no see!'),
    (4, 5, 'Hello user5!'),
    (5, 1, 'Hi user1, nice to meet you!');

  anomalies:  
    - anomaly: LOCK_CONTENTION
      threads: 100
      ncolumn: 20
      nrow:    20000
      colsize: 100

communication: False

task:
  content: |
    The sysbench database manages user interactions, posts, and real-time engagement metrics. 
    Recently, during operation, the database monitoring system has triggered an alert. Analyze the database alerts & outputs and find out the reason that caused it. The root cause can be only one of the following: 'Sync Commits', 'Many Inserts', 'High Updates', 'Many Deletes', 'Index Missing', 'Redundant Indexes', 'Large Data Insert', 'Large Data Fetch', 'Poor Join Performance', 'Correlated Subquery'. The planner should ask different experts to work on the same task, and summarize their opinions into a final prediction. Please make the decision after using all these tools, as a premature decision may lead to incorrect conclusions.
  
  output_format: |
    Please make the decision after using all these tools, as a premature decision may lead to incorrect conclusions.
    Please choose the most likely cause of the database anomaly from the following list, based on the expert agents: 
    'INSERT_LARGE_DATA', 'LOCK_CONTENTION', 'LOCK_CONTENTION', 'VACUUM', 'REDUNDANT_INDEX', 'INSERT_LARGE_DATA,IO_CONTENTION', 'FETCH_LARGE_DATA,CORRELATED_SUBQUERY', 'POOR_JOIN_PERFORMANCE,CPU_CONTENTION'
    You can ONLY CHOOSE THREE.
    Please make the decision after using all these tools, as a premature decision may lead to incorrect conclusions.
    These functions include:

    get_alerts_handler:
      Retrieves and formats current alerts from Prometheus, returning detailed information about each alert, including name, severity, description, state, active since, and value.

    detect_metric_abnormality_handler:
      Checks for anomalies in a specified metric using data from the last 10 minutes. It maps the metric name, retrieves the data, and uses a statistical method to identify abnormalities.

    get_alert_metrics_handler:
      Retrieves metrics related to current alerts and returns a detailed explanation of the alert metrics.

    get_rag_handler:
      Retrieves relevant knowledge from the Retrieval-Augmented Generation (RAG) system based on the expert and metric name, and returns an explanation.

    get_slow_query_handler:
      Retrieves information about the slowest queries executed in the database and returns an explanation. output_format: |

  labels: 
    - 'INSERT_LARGE_DATA'
    - 'LOCK_CONTENTION'
    - 'LOCK_CONTENTION'
    - 'VACUUM'
    - 'REDUNDANT_INDEX'
    - 'INSERT_LARGE_DATA,IO_CONTENTION'
    - 'FETCH_LARGE_DATA,CORRELATED_SUBQUERY'
    - 'POOR_JOIN_PERFORMANCE,CPU_CONTENTION'
  root_causes: 
    - 'LOCK_CONTENTION'
  number_of_labels_pred: 3

agents:
  - type: BaseAgent
    agent_id: agent1
    profile: "agent1 is a ConfigurationExpert that specializes in system configurations and optimizations."
  - type: BaseAgent
    agent_id: agent2
    profile: "agent2 is a CpuExpert that specializes in CPU architecture, performance, and optimizations."
  - type: BaseAgent
    agent_id: agent3
    profile: "agent3 is a WorkloadExpert that specializes in analyzing workloads, resource allocation, and optimization for efficiency."
  - type: BaseAgent
    agent_id: agent4
    profile: "agent4 is a DiskExpert that specializes in disk I/O, storage, and optimization for performance."
  - type: BaseAgent
    agent_id: agent5
    profile: "agent5 is a QueryExpert that specializes in query optimization, indexing, and performance tuning."

memory:
  type: SharedMemory

metrics: 
  accuracy: true
  response_time: true

output:
  file_path: "result/SOCIAL_MEDIA_LOCK_CONTENTION_RESULT.json"

engine_planner:
  initial_progress: "Starting the simulation."