coordinate_mode: star
relationships: []
llm: gpt-4o-mini
environment:
  type: DB
  name: DB Simulation Environment
  max_iterations: 5
  init_sql: "-- Comprehensive Educational Management System Schema\n\n-- Department\
    \ Table\nCREATE TABLE departments (\n    department_id SERIAL PRIMARY KEY,\n \
    \   name VARCHAR(100) NOT NULL,\n    description TEXT,\n    college VARCHAR(100),\n\
    \    established_year INTEGER\n);\n\n-- Faculty Table\nCREATE TABLE faculty (\n\
    \    faculty_id SERIAL PRIMARY KEY,\n    first_name VARCHAR(100) NOT NULL,\n \
    \   last_name VARCHAR(100) NOT NULL,\n    email VARCHAR(255) UNIQUE NOT NULL,\n\
    \    department_id INTEGER REFERENCES departments(department_id),\n    hire_date\
    \ DATE,\n    academic_rank VARCHAR(50),\n    highest_degree VARCHAR(100),\n  \
    \  research_interests TEXT\n);\n\n-- Courses Table\nCREATE TABLE courses (\n \
    \   course_id SERIAL PRIMARY KEY,\n    course_code VARCHAR(20) UNIQUE NOT NULL,\n\
    \    name VARCHAR(255) NOT NULL,\n    description TEXT,\n    department_id INTEGER\
    \ REFERENCES departments(department_id),\n    credit_hours INTEGER NOT NULL,\n\
    \    level VARCHAR(50), -- Undergraduate, Graduate, etc.\n    prerequisite_course_id\
    \ INTEGER REFERENCES courses(course_id)\n);\n\n-- Students Table\nCREATE TABLE\
    \ students (\n    student_id SERIAL PRIMARY KEY,\n    first_name VARCHAR(100)\
    \ NOT NULL,\n    last_name VARCHAR(100) NOT NULL,\n    email VARCHAR(255) UNIQUE\
    \ NOT NULL,\n    date_of_birth DATE,\n    enrollment_date DATE,\n    graduation_date\
    \ DATE,\n    major_department_id INTEGER REFERENCES departments(department_id),\n\
    \    graduation_year INTEGER,\n    gpa DECIMAL(3,2),\n    student_status VARCHAR(50)\
    \ -- Freshman, Sophomore, Junior, Senior, Graduate\n);\n\n-- Enrollment Table\n\
    CREATE TABLE enrollments (\n    enrollment_id SERIAL PRIMARY KEY,\n    student_id\
    \ INTEGER REFERENCES students(student_id),\n    course_id INTEGER REFERENCES courses(course_id),\n\
    \    faculty_id INTEGER REFERENCES faculty(faculty_id),\n    semester VARCHAR(50),\n\
    \    academic_year INTEGER,\n    enrollment_date DATE DEFAULT CURRENT_DATE,\n\
    \    final_grade VARCHAR(2), -- A, A-, B+, B, etc.\n    grade_points DECIMAL(3,2)\n\
    );\n\n-- Classroom Locations\nCREATE TABLE classroom_locations (\n    location_id\
    \ SERIAL PRIMARY KEY,\n    building_name VARCHAR(100),\n    room_number VARCHAR(20),\n\
    \    capacity INTEGER,\n    has_technology BOOLEAN,\n    accessibility_features\
    \ TEXT\n);\n\n-- Course Schedules\nCREATE TABLE course_schedules (\n    schedule_id\
    \ SERIAL PRIMARY KEY,\n    course_id INTEGER REFERENCES courses(course_id),\n\
    \    location_id INTEGER REFERENCES classroom_locations(location_id),\n    day_of_week\
    \ VARCHAR(10),\n    start_time TIME,\n    end_time TIME,\n    semester VARCHAR(50),\n\
    \    academic_year INTEGER\n);\n\n-- Research Projects\nCREATE TABLE research_projects\
    \ (\n    project_id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n  \
    \  description TEXT,\n    primary_investigator_id INTEGER REFERENCES faculty(faculty_id),\n\
    \    start_date DATE,\n    end_date DATE,\n    funding_amount DECIMAL(10,2),\n\
    \    funding_source VARCHAR(255)\n);\n\n-- Project Contributors\nCREATE TABLE\
    \ project_contributors (\n    contribution_id SERIAL PRIMARY KEY,\n    project_id\
    \ INTEGER REFERENCES research_projects(project_id),\n    faculty_id INTEGER REFERENCES\
    \ faculty(faculty_id),\n    student_id INTEGER REFERENCES students(student_id),\n\
    \    role VARCHAR(100)\n);\n\n-- Sample Data Insertion\n\n-- Departments\nINSERT\
    \ INTO departments (name, description, college, established_year) VALUES\n('Computer\
    \ Science', 'Department of Computer and Information Sciences', 'College of Science',\
    \ 1985),\n('Electrical Engineering', 'Electrical and Computer Engineering Department',\
    \ 'College of Engineering', 1970),\n('Biology', 'Biological Sciences Department',\
    \ 'College of Science', 1965),\n('History', 'Department of Historical Studies',\
    \ 'College of Liberal Arts', 1950);\n\n-- Faculty\nINSERT INTO faculty (\n   \
    \ first_name, last_name, email, department_id, hire_date, \n    academic_rank,\
    \ highest_degree, research_interests\n) VALUES\n('John', 'Smith', 'john.smith@university.edu',\
    \ 1, '2010-09-01', \n 'Professor', 'Ph.D. in Computer Science', 'Machine Learning,\
    \ AI Ethics'),\n('Emily', 'Johnson', 'emily.johnson@university.edu', 2, '2015-01-15',\
    \ \n 'Associate Professor', 'Ph.D. in Electrical Engineering', 'Renewable Energy\
    \ Systems'),\n('Michael', 'Williams', 'michael.williams@university.edu', 3, '2012-08-20',\
    \ \n 'Assistant Professor', 'Ph.D. in Molecular Biology', 'Genetic Research');\n\
    \n-- Courses\nINSERT INTO courses (\n    course_code, name, description, department_id,\
    \ \n    credit_hours, level\n) VALUES\n('CS101', 'Introduction to Programming',\
    \ 'Fundamental programming concepts', 1, 4, 'Undergraduate'),\n('EE202', 'Digital\
    \ Circuit Design', 'Advanced digital electronics', 2, 3, 'Undergraduate'),\n('BIO305',\
    \ 'Molecular Genetics', 'Advanced study of genetic mechanisms', 3, 4, 'Graduate'),\n\
    ('HIST201', 'World History', 'Comprehensive global historical overview', 4, 3,\
    \ 'Undergraduate');\n\n-- Students\nINSERT INTO students (\n    first_name, last_name,\
    \ email, date_of_birth, \n    enrollment_date, major_department_id, \n    student_status,\
    \ gpa\n) VALUES\n('Sarah', 'Davis', 'sarah.davis@student.edu', '2000-05-15', \n\
    \ '2019-08-25', 1, 'Junior', 3.75),\n('David', 'Miller', 'david.miller@student.edu',\
    \ '2001-03-22', \n '2020-01-10', 2, 'Sophomore', 3.50),\n('Jessica', 'Brown',\
    \ 'jessica.brown@student.edu', '1999-11-30', \n '2018-09-01', 3, 'Senior', 3.90);\n\
    \n-- Enrollments\nINSERT INTO enrollments (\n    student_id, course_id, faculty_id,\
    \ \n    semester, academic_year, final_grade, grade_points\n) VALUES\n(1, 1, 1,\
    \ 'Fall', 2023, 'A', 4.0),\n(2, 2, 2, 'Spring', 2023, 'B+', 3.3),\n(3, 3, 3, 'Fall',\
    \ 2023, 'A-', 3.7);\n\n-- Classroom Locations\nINSERT INTO classroom_locations\
    \ (\n    building_name, room_number, \n    capacity, has_technology, accessibility_features\n\
    ) VALUES\n('Science Building', '301', 30, TRUE, 'Wheelchair accessible, hearing\
    \ assist devices'),\n('Engineering Hall', '205', 40, TRUE, 'Ramp access, adjustable\
    \ desks'),\n('Liberal Arts Center', '102', 25, FALSE, 'Ground floor, wide doorways');\n\
    \n-- Course Schedules\nINSERT INTO course_schedules (\n    course_id, location_id,\
    \ day_of_week, \n    start_time, end_time, semester, academic_year\n) VALUES\n\
    (1, 1, 'Monday', '10:00:00', '11:30:00', 'Fall', 2023),\n(2, 2, 'Wednesday', '13:00:00',\
    \ '14:30:00', 'Spring', 2023),\n(3, 3, 'Tuesday', '15:00:00', '16:30:00', 'Fall',\
    \ 2023);\n\n-- Research Projects\nINSERT INTO research_projects (\n    title,\
    \ description, primary_investigator_id, \n    start_date, end_date, funding_amount,\
    \ funding_source\n) VALUES\n('AI Ethics in Modern Computing', 'Exploring ethical\
    \ implications of AI technologies', 1, \n '2022-01-01', '2024-12-31', 250000.00,\
    \ 'National Science Foundation'),\n('Sustainable Energy Solutions', 'Developing\
    \ innovative renewable energy technologies', 2, \n '2021-06-01', '2023-12-31',\
    \ 350000.00, 'Department of Energy');\n\n-- Analytical Queries\n\n-- 1. Student\
    \ Performance Analysis\nCREATE OR REPLACE VIEW student_performance_summary AS\n\
    SELECT \n    s.student_id,\n    s.first_name || ' ' || s.last_name AS student_name,\n\
    \    d.name AS major,\n    COUNT(e.course_id) AS total_courses,\n    ROUND(AVG(\n\
    \        CASE \n            WHEN e.final_grade = 'A' THEN 4.0\n            WHEN\
    \ e.final_grade = 'A-' THEN 3.7\n            WHEN e.final_grade = 'B+' THEN 3.3\n\
    \            WHEN e.final_grade = 'B' THEN 3.0\n            WHEN e.final_grade\
    \ = 'B-' THEN 2.7\n            ELSE 0\n        END\n    ), 2) AS semester_gpa\n\
    FROM students s\nJOIN departments d ON s.major_department_id = d.department_id\n\
    LEFT JOIN enrollments e ON s.student_id = e.student_id\nGROUP BY s.student_id,\
    \ d.name\nORDER BY semester_gpa DESC;\n\n-- 2. Course Enrollment Statistics\n\
    CREATE OR REPLACE VIEW course_enrollment_stats AS\nSELECT \n    c.course_id,\n\
    \    c.course_code,\n    c.name AS course_name,\n    d.name AS department,\n \
    \   COUNT(e.enrollment_id) AS total_enrolled,\n    ROUND(AVG(\n        CASE \n\
    \            WHEN e.final_grade IN ('A', 'A-') THEN 1.0\n            ELSE 0.0\n\
    \        END\n    ) * 100, 2) AS success_rate\nFROM courses c\nJOIN departments\
    \ d ON c.department_id = d.department_id\nLEFT JOIN enrollments e ON c.course_id\
    \ = e.course_id\nGROUP BY c.course_id, d.name\nORDER BY total_enrolled DESC;\n\
    \n-- 3. Faculty Research Impact\nCREATE OR REPLACE VIEW faculty_research_impact\
    \ AS\nSELECT \n    f.faculty_id,\n    f.first_name || ' ' || f.last_name AS faculty_name,\n\
    \    d.name AS department,\n    COUNT(DISTINCT rp.project_id) AS total_projects,\n\
    \    ROUND(SUM(rp.funding_amount), 2) AS total_funding,\n    COUNT(DISTINCT pc.student_id)\
    \ AS students_involved\nFROM faculty f\nJOIN departments d ON f.department_id\
    \ = d.department_id\nLEFT JOIN research_projects rp ON f.faculty_id = rp.primary_investigator_id\n\
    LEFT JOIN project_contributors pc ON rp.project_id = pc.project_id\nGROUP BY f.faculty_id,\
    \ d.name\nORDER BY total_funding DESC;\n\n-- 4. Department Performance Metrics\n\
    CREATE OR REPLACE VIEW department_performance AS\nSELECT \n    d.department_id,\n\
    \    d.name AS department_name,\n    COUNT(DISTINCT s.student_id) AS total_students,\n\
    \    COUNT(DISTINCT c.course_id) AS total_courses,\n    ROUND(AVG(s.gpa), 2) AS\
    \ average_department_gpa,\n    ROUND(AVG(c.credit_hours), 2) AS average_course_credits\n\
    FROM departments d\nLEFT JOIN students s ON d.department_id = s.major_department_id\n\
    LEFT JOIN courses c ON d.department_id = c.department_id\nGROUP BY d.department_id\n\
    ORDER BY total_students DESC;\n\n-- 5. Student Graduation Projection\nCREATE OR\
    \ REPLACE FUNCTION predict_graduation_rates(academic_year_param INTEGER)\nRETURNS\
    \ TABLE (\n    department_name VARCHAR(100),\n    expected_graduates INTEGER,\n\
    \    total_students INTEGER,\n    graduation_rate NUMERIC\n) AS $$\nBEGIN\n  \
    \  RETURN QUERY\n    WITH student_counts AS (\n        SELECT \n            d.name\
    \ AS department_name,\n            COUNT(s.student_id) AS total_students,\n  \
    \          COUNT(CASE WHEN s.graduation_year = academic_year_param THEN 1 END)\
    \ AS expected_graduates\n        FROM departments d\n        LEFT JOIN students\
    \ s ON d.department_id = s.major_department_id\n        GROUP BY d.name\n    )\n\
    \    SELECT \n        department_name,\n        expected_graduates,\n        total_students,\n\
    \        ROUND(expected_graduates * 100.0 / NULLIF(total_students, 0), 2) AS graduation_rate\n\
    \    FROM student_counts\n    ORDER BY graduation_rate DESC;\nEND;\n$$ LANGUAGE\
    \ plpgsql;\n\n-- 1. List All Students with Their Major Department\nSELECT \n \
    \   s.student_id,\n    s.first_name,\n    s.last_name,\n    s.email,\n    d.name\
    \ AS major_department,\n    s.student_status,\n    s.gpa\nFROM students s\nJOIN\
    \ departments d ON s.major_department_id = d.department_id\nORDER BY s.gpa DESC;\n\
    \n-- 2. Detailed Course Information with Department and Instructor\nSELECT \n\
    \    c.course_id,\n    c.course_code,\n    c.name AS course_name,\n    d.name\
    \ AS department_name,\n    f.first_name || ' ' || f.last_name AS primary_instructor,\n\
    \    c.credit_hours,\n    c.level\nFROM courses c\nJOIN departments d ON c.department_id\
    \ = d.department_id\nLEFT JOIN enrollments e ON c.course_id = e.course_id\nLEFT\
    \ JOIN faculty f ON e.faculty_id = f.faculty_id\nGROUP BY c.course_id, d.name,\
    \ f.first_name, f.last_name\nORDER BY department_name, course_name;\n\n-- 3. Faculty\
    \ Research Project Details\nSELECT \n    rp.project_id,\n    rp.title,\n    f.first_name\
    \ || ' ' || f.last_name AS primary_investigator,\n    d.name AS department,\n\
    \    rp.start_date,\n    rp.end_date,\n    rp.funding_amount,\n    rp.funding_source,\n\
    \    COUNT(DISTINCT pc.student_id) AS student_contributors\nFROM research_projects\
    \ rp\nJOIN faculty f ON rp.primary_investigator_id = f.faculty_id\nJOIN departments\
    \ d ON f.department_id = d.department_id\nLEFT JOIN project_contributors pc ON\
    \ rp.project_id = pc.project_id\nGROUP BY rp.project_id, f.first_name, f.last_name,\
    \ d.name\nORDER BY rp.funding_amount DESC;\n\n-- 4. Student Enrollment and Grade\
    \ Details\nSELECT \n    s.student_id,\n    s.first_name || ' ' || s.last_name\
    \ AS student_name,\n    c.course_code,\n    c.name AS course_name,\n    e.semester,\n\
    \    e.academic_year,\n    e.final_grade,\n    e.grade_points\nFROM students s\n\
    JOIN enrollments e ON s.student_id = e.student_id\nJOIN courses c ON e.course_id\
    \ = c.course_id\nORDER BY s.last_name, e.academic_year, e.semester;\n\n-- 5. Classroom\
    \ Utilization Report\nSELECT \n    cl.building_name,\n    cl.room_number,\n  \
    \  cl.capacity,\n    COUNT(cs.course_id) AS courses_using_room,\n    STRING_AGG(c.course_code\
    \ || ': ' || c.name, ', ') AS courses_in_room\nFROM classroom_locations cl\nLEFT\
    \ JOIN course_schedules cs ON cl.location_id = cs.location_id\nLEFT JOIN courses\
    \ c ON cs.course_id = c.course_id\nGROUP BY cl.location_id, cl.building_name,\
    \ cl.room_number, cl.capacity\nORDER BY courses_using_room DESC;\n\n-- 6. Department-wise\
    \ Course and Faculty Analysis\nSELECT \n    d.department_id,\n    d.name AS department_name,\n\
    \    COUNT(DISTINCT c.course_id) AS total_courses,\n    COUNT(DISTINCT f.faculty_id)\
    \ AS total_faculty,\n    ROUND(AVG(c.credit_hours), 2) AS avg_course_credits\n\
    FROM departments d\nLEFT JOIN courses c ON d.department_id = c.department_id\n\
    LEFT JOIN faculty f ON d.department_id = f.department_id\nGROUP BY d.department_id,\
    \ d.name\nORDER BY total_courses DESC;\n\n-- 7. Student Enrollment by Semester\
    \ and Year\nSELECT \n    e.semester,\n    e.academic_year,\n    COUNT(DISTINCT\
    \ e.student_id) AS total_students_enrolled,\n    COUNT(DISTINCT e.course_id) AS\
    \ total_courses_offered,\n    ROUND(AVG(\n        CASE \n            WHEN e.final_grade\
    \ IN ('A', 'A-') THEN 1.0 \n            ELSE 0.0 \n        END\n    ) * 100, 2)\
    \ AS overall_success_rate\nFROM enrollments e\nGROUP BY e.semester, e.academic_year\n\
    ORDER BY e.academic_year, e.semester;\n\n-- 8. Faculty Research Funding Analysis\n\
    SELECT \n    f.first_name || ' ' || f.last_name AS faculty_name,\n    d.name AS\
    \ department,\n    COUNT(rp.project_id) AS total_projects,\n    ROUND(SUM(rp.funding_amount),\
    \ 2) AS total_funding,\n    ROUND(AVG(rp.funding_amount), 2) AS average_project_funding\n\
    FROM faculty f\nJOIN departments d ON f.department_id = d.department_id\nLEFT\
    \ JOIN research_projects rp ON f.faculty_id = rp.primary_investigator_id\nGROUP\
    \ BY f.faculty_id, d.name\nORDER BY total_funding DESC;\n"
  anomalies:
  - anomaly: INSERT_LARGE_DATA
    threads: 100
    ncolumn: 20
    nrow: 20000
    colsize: 100
communication: false
task:
  content: 'The database is designed to manage educational information for a university,
    covering departments, faculty, courses, students, and research projects. It allows
    tracking of faculty members'' details, including their academic rank, research
    interests, and associated projects, along with the courses they teach. The students''
    information, including their major, GPA, and course enrollments, is captured along
    with their performance metrics in various courses. It also includes detailed records
    of research projects, funding, and contributors, both faculty and students, enhancing
    the understanding of academic contributions. Finally, the system enables analytical
    queries such as student performance, course success rates, and faculty research
    impact, supporting educational insights and projections.


    Recently, during operation, the database monitoring system has triggered an alert.
    Use sql queries to the - **Insert-related issues**: `pg_stat_activity` (for running
    queries) and `pg_stat_statements` (for detailed query stats).- **Lock contention**:
    `pg_locks` (for lock waits and contention) and `pg_stat_activity` (for identifying
    blocked queries).- **Redundant indexes**: `pg_stat_user_indexes` (for index usage)
    and `pg_indexes` (for index definitions).- **VACUUM-related issues**: `pg_stat_all_tables`
    (detailed statistics about vacuuming, auto vacuuming, and analyze operations for
    each table). table to find out what is wrong, and query the RAG system to get
    related information, and find out the reason that caused it. The root cause can
    be only two of the following: ''INSERT_LARGE_DATA'', ''MISSING_INDEXES'', ''LOCK_CONTENTION'',
    ''VACUUM'', ''REDUNDANT_INDEX'', ''FETCH_LARGE_DATA,CORRELATED_SUBQUERY'', ''POOR_JOIN_PERFORMANCE,CPU_CONTENTION''.
    The planner should assign different agent to analyze possbility for each root
    cause and make final decision. Please make the decision after using all these
    tools, as a premature decision may lead to incorrect conclusions.

    '
  output_format: "Please make the decision after exploring all rootcauses, as a premature\
    \ decision may lead to incorrect conclusions.\nPlease choose the most likely cause\
    \ of the database anomaly from the following list, based on the expert agents:\
    \ \n'INSERT_LARGE_DATA', 'MISSING_INDEXES', 'LOCK_CONTENTION', 'VACUUM', 'REDUNDANT_INDEX',\
    \ 'FETCH_LARGE_DATA'\nYou can ONLY CHOOSE two.\nYou have access to the Database,\
    \ and you can perform queries to get the required information.\nThese tables include:\n\
    - `pg_stat_activity` (for running queries)\n- `pg_stat_statements` (for detailed\
    \ query stats)\n- `pg_locks` (for lock waits and contention)\n- `pg_stat_user_indexes`\
    \ (for index usage)\n- `pg_indexes` (for index definitions)\n- `pg_stat_all_tables`\
    \ (detailed statistics about vacuuming, auto vacuuming, and analyze operations\
    \ for each table)\n- `pg_stat_progress_vacuum` (for vacuum progress)\n- `pg_stat_user_tables`\
    \ (for dead tuples and vacuum stats)\n"
  labels:
  - INSERT_LARGE_DATA
  - MISSING_INDEXES
  - LOCK_CONTENTION
  - VACUUM
  - REDUNDANT_INDEX
  - FETCH_LARGE_DATA
  root_causes:
  - INSERT_LARGE_DATA
  number_of_labels_pred: 2
agents:
- type: BaseAgent
  agent_id: agent1
  profile: 'agent1 will query the - **Insert-related issues**: `pg_stat_activity`
    (for running queries) and `pg_stat_statements` (for detailed query stats).- **Lock
    contention**: `pg_locks` (for lock waits and contention) and `pg_stat_activity`
    (for identifying blocked queries).- **Redundant indexes**: `pg_stat_user_indexes`
    (for index usage) and `pg_indexes` (for index definitions).- **VACUUM-related
    issues**: `pg_stat_all_tables` (detailed statistics about vacuuming, auto vacuuming,
    and analyze operations for each table). table and learn from the RAG system to
    identify the root cause of the database anomaly.'
- type: BaseAgent
  agent_id: agent2
  profile: 'agent2 will query the - **Insert-related issues**: `pg_stat_activity`
    (for running queries) and `pg_stat_statements` (for detailed query stats).- **Lock
    contention**: `pg_locks` (for lock waits and contention) and `pg_stat_activity`
    (for identifying blocked queries).- **Redundant indexes**: `pg_stat_user_indexes`
    (for index usage) and `pg_indexes` (for index definitions).- **VACUUM-related
    issues**: `pg_stat_all_tables` (detailed statistics about vacuuming, auto vacuuming,
    and analyze operations for each table). table and learn from the RAG system to
    identify the root cause of the database anomaly.'
- type: BaseAgent
  agent_id: agent3
  profile: 'agent3 will query the - **Insert-related issues**: `pg_stat_activity`
    (for running queries) and `pg_stat_statements` (for detailed query stats).- **Lock
    contention**: `pg_locks` (for lock waits and contention) and `pg_stat_activity`
    (for identifying blocked queries).- **Redundant indexes**: `pg_stat_user_indexes`
    (for index usage) and `pg_indexes` (for index definitions).- **VACUUM-related
    issues**: `pg_stat_all_tables` (detailed statistics about vacuuming, auto vacuuming,
    and analyze operations for each table). table and learn from the RAG system to
    identify the root cause of the database anomaly.'
- type: BaseAgent
  agent_id: agent4
  profile: 'agent4 will query the - **Insert-related issues**: `pg_stat_activity`
    (for running queries) and `pg_stat_statements` (for detailed query stats).- **Lock
    contention**: `pg_locks` (for lock waits and contention) and `pg_stat_activity`
    (for identifying blocked queries).- **Redundant indexes**: `pg_stat_user_indexes`
    (for index usage) and `pg_indexes` (for index definitions).- **VACUUM-related
    issues**: `pg_stat_all_tables` (detailed statistics about vacuuming, auto vacuuming,
    and analyze operations for each table). table and learn from the RAG system to
    identify the root cause of the database anomaly.'
- type: BaseAgent
  agent_id: agent5
  profile: 'agent5 will query the - **Insert-related issues**: `pg_stat_activity`
    (for running queries) and `pg_stat_statements` (for detailed query stats).- **Lock
    contention**: `pg_locks` (for lock waits and contention) and `pg_stat_activity`
    (for identifying blocked queries).- **Redundant indexes**: `pg_stat_user_indexes`
    (for index usage) and `pg_indexes` (for index definitions).- **VACUUM-related
    issues**: `pg_stat_all_tables` (detailed statistics about vacuuming, auto vacuuming,
    and analyze operations for each table). table and learn from the RAG system to
    identify the root cause of the database anomaly.'
- type: BaseAgent
  agent_id: agent6
  profile: 'agent6 will query the - **Insert-related issues**: `pg_stat_activity`
    (for running queries) and `pg_stat_statements` (for detailed query stats).- **Lock
    contention**: `pg_locks` (for lock waits and contention) and `pg_stat_activity`
    (for identifying blocked queries).- **Redundant indexes**: `pg_stat_user_indexes`
    (for index usage) and `pg_indexes` (for index definitions).- **VACUUM-related
    issues**: `pg_stat_all_tables` (detailed statistics about vacuuming, auto vacuuming,
    and analyze operations for each table). table and learn from the RAG system to
    identify the root cause of the database anomaly.'
memory:
  type: SharedMemory
metrics:
  accuracy: true
  response_time: true
output:
  file_path: result/E_COMMERCE_INSERT_LARGE_DATA_RESULT.json
engine_planner:
  initial_progress: Starting the simulation.
