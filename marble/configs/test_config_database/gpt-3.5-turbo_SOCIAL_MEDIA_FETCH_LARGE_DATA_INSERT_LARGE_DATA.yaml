coordinate_mode: graph
relationships:
- - agent1
  - agent2
  - collaborate with
- - agent1
  - agent3
  - collaborate with
- - agent1
  - agent4
  - collaborate with
- - agent1
  - agent5
  - collaborate with
- - agent2
  - agent3
  - collaborate with
- - agent2
  - agent4
  - collaborate with
- - agent2
  - agent5
  - collaborate with
- - agent3
  - agent4
  - collaborate with
- - agent3
  - agent5
  - collaborate with
- - agent4
  - agent5
  - collaborate with
llm: gpt-3.5-turbo
environment:
  type: DB
  name: DB Simulation Environment
  max_iterations: 5
  init_sql: "-- 1. Users table (stores information about users)\nCREATE TABLE users\
    \ (\n    user_id SERIAL PRIMARY KEY,  -- Unique user ID\n    username VARCHAR(50)\
    \ UNIQUE NOT NULL,  -- Username\n    first_name VARCHAR(100),  -- User's first\
    \ name\n    last_name VARCHAR(100),   -- User's last name\n    email VARCHAR(255)\
    \ UNIQUE NOT NULL,  -- User email\n    password VARCHAR(255) NOT NULL,  -- User\
    \ password\n    bio TEXT,  -- User's biography\n    profile_picture VARCHAR(255),\
    \  -- URL to profile picture\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\
    \  -- Account creation time\n);\n\n-- 2. Posts table (stores user posts)\nCREATE\
    \ TABLE posts (\n    post_id SERIAL PRIMARY KEY,  -- Unique post ID\n    user_id\
    \ INT REFERENCES users(user_id),  -- Foreign key to users\n    content TEXT, \
    \ -- Post content\n    image_url VARCHAR(255),  -- URL to image associated with\
    \ post\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,  -- Post creation\
    \ time\n    updated_at TIMESTAMP  -- Post last updated time\n);\n\n-- 3. Comments\
    \ table (stores comments on posts)\nCREATE TABLE comments (\n    comment_id SERIAL\
    \ PRIMARY KEY,  -- Unique comment ID\n    post_id INT REFERENCES posts(post_id)\
    \ ON DELETE CASCADE,  -- Foreign key to posts\n    user_id INT REFERENCES users(user_id),\
    \  -- Foreign key to users\n    content TEXT NOT NULL,  -- Comment content\n \
    \   created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP  -- Comment creation time\n\
    );\n\n-- 4. Likes table (stores likes on posts)\nCREATE TABLE likes (\n    like_id\
    \ SERIAL PRIMARY KEY,  -- Unique like ID\n    post_id INT REFERENCES posts(post_id)\
    \ ON DELETE CASCADE,  -- Foreign key to posts\n    user_id INT REFERENCES users(user_id),\
    \  -- Foreign key to users\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\
    \  -- Like timestamp\n);\n\n-- 5. Followers table (stores follow relationships\
    \ between users)\nCREATE TABLE followers (\n    follower_id INT REFERENCES users(user_id),\
    \  -- User who follows\n    followed_id INT REFERENCES users(user_id),  -- User\
    \ being followed\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,  -- Follow\
    \ time\n    PRIMARY KEY (follower_id, followed_id)  -- Composite primary key\n\
    );\n\n-- 6. Messages table (stores direct messages between users)\nCREATE TABLE\
    \ messages (\n    message_id SERIAL PRIMARY KEY,  -- Unique message ID\n    sender_id\
    \ INT REFERENCES users(user_id),  -- User who sent the message\n    receiver_id\
    \ INT REFERENCES users(user_id),  -- User who received the message\n    content\
    \ TEXT,  -- Message content\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\
    \  -- Message sent time\n    read_status BOOLEAN DEFAULT FALSE  -- Read status\
    \ of the message\n);\n\n-- 7. Media table (stores media files associated with\
    \ posts and messages)\nCREATE TABLE media (\n    media_id SERIAL PRIMARY KEY,\
    \  -- Unique media ID\n    user_id INT REFERENCES users(user_id),  -- User who\
    \ uploaded the media\n    media_type VARCHAR(50) NOT NULL,  -- Type of media (image,\
    \ video, etc.)\n    media_url VARCHAR(255) NOT NULL,  -- URL to the media file\n\
    \    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP  -- Upload time\n);\n\n--\
    \ Insert some sample users\nINSERT INTO users (username, first_name, last_name,\
    \ email, password) \nVALUES \n('john_doe', 'John', 'Doe', 'john.doe@example.com',\
    \ 'password123'),\n('jane_smith', 'Jane', 'Smith', 'jane.smith@example.com', 'password456');\n\
    \n-- Insert some posts\nINSERT INTO posts (user_id, content, image_url) \nVALUES\
    \ \n(1, 'Excited to be part of this platform!', 'https://example.com/images/welcome.jpg'),\n\
    (2, 'Good morning, everyone!', 'https://example.com/images/morning.jpg');\n\n\
    -- Insert comments on posts\nINSERT INTO comments (post_id, user_id, content)\
    \ \nVALUES \n(1, 2, 'Welcome to the platform, John!'),\n(2, 1, 'Good morning,\
    \ Jane!');\n\n-- Insert likes on posts\nINSERT INTO likes (post_id, user_id) \n\
    VALUES \n(1, 2),\n(2, 1);\n\n-- Insert follow relationships\nINSERT INTO followers\
    \ (follower_id, followed_id) \nVALUES \n(1, 2),  -- John follows Jane\n(2, 1);\
    \  -- Jane follows John\n\n-- Insert direct messages\nINSERT INTO messages (sender_id,\
    \ receiver_id, content) \nVALUES \n(1, 2, 'Hi Jane, how are you?'),\n(2, 1, 'Im\
    \ good, John! How about you?');\n\n-- Insert media uploaded by users\nINSERT INTO\
    \ media (user_id, media_type, media_url) \nVALUES \n(1, 'image', 'https://example.com/media/photo1.jpg'),\n\
    (2, 'video', 'https://example.com/media/video1.mp4');\n\n-- Select all posts along\
    \ with user details\nSELECT p.post_id, p.content, u.username, p.created_at\nFROM\
    \ posts p\nJOIN users u ON p.user_id = u.user_id;\n\n-- Select comments on a post\n\
    SELECT c.comment_id, c.content, u.username, c.created_at\nFROM comments c\nJOIN\
    \ users u ON c.user_id = u.user_id\nWHERE c.post_id = 1;\n\n-- Select all likes\
    \ on a post\nSELECT l.like_id, u.username, l.created_at\nFROM likes l\nJOIN users\
    \ u ON l.user_id = u.user_id\nWHERE l.post_id = 1;\n\n-- Select all followers\
    \ of a user\nSELECT u.username\nFROM followers f\nJOIN users u ON f.follower_id\
    \ = u.user_id\nWHERE f.followed_id = 1;\n\n-- Select all direct messages between\
    \ three users\nSELECT m.content, u1.username AS sender, u2.username AS receiver,\
    \ m.created_at\nFROM messages m\nJOIN users u1 ON m.sender_id = u1.user_id\nJOIN\
    \ users u2 ON m.receiver_id = u2.user_id\nWHERE m.sender_id = 1 AND m.receiver_id\
    \ = 2;\n"
  anomalies:
  - anomaly: INSERT_LARGE_DATA
    threads: 100
    ncolumn: 20
    nrow: 20000
    colsize: 100
  - anomaly: FETCH_LARGE_DATA
    threads: 100
    ncolumn: 20
    nrow: 20000
    colsize: 100
communication: false
task:
  content: 'This database is used for a Social Media platform, where users can create
    posts, comment on posts, like posts, follow other users, send direct messages,
    and upload media. The schema covers key aspects such as user information, social
    interactions (like, comments, follow), messaging, and media management.

    Recently, during operation, the database has seen performance issues. Use sql
    queries to find out what is wrong, and find out the reason that caused it. The
    root cause can be only three of the following: ''INSERT_LARGE_DATA'', ''MISSING_INDEXES'',
    ''LOCK_CONTENTION'', ''VACUUM'', ''REDUNDANT_INDEX'', ''FETCH_LARGE_DATA'', ''POOR_JOIN_PERFORMANCE,CPU_CONTENTION''.
    The planner should assign different agent to analyze possbility for each root
    cause and make final decision. Agents can also chat with each other to share information.  Please
    make the decision after using all these tools, as a premature decision may lead
    to incorrect conclusions.

    '
  output_format: "Please make the decision after exploring all rootcauses, as a premature\
    \ decision may lead to incorrect conclusions.\nPlease choose the most likely cause\
    \ of the database anomaly from the following list, based on the expert agents:\
    \ \n'INSERT_LARGE_DATA', 'LOCK_CONTENTION', 'VACUUM', 'REDUNDANT_INDEX', 'FETCH_LARGE_DATA'\n\
    You can ONLY CHOOSE three.\nYou have access to the Database, and you can perform\
    \ queries to get the required information. Agents can also chat with each other\
    \ to share information.\nThese tables include:\n- `pg_stat_statements` (for detailed\
    \ query stats)\n- `pg_locks` (for lock waits and contention)\n- `pg_stat_user_indexes`\
    \ (for index usage)\n- `pg_indexes` (for index definitions)\n- `pg_stat_all_tables`\
    \ (detailed statistics about vacuuming, auto vacuuming, and analyze operations\
    \ for each table)\n- `pg_stat_progress_vacuum` (for vacuum progress)\n- `pg_stat_user_tables`\
    \ (for dead tuples and vacuum stats)\n"
  labels:
  - INSERT_LARGE_DATA
  - LOCK_CONTENTION
  - VACUUM
  - REDUNDANT_INDEX
  - FETCH_LARGE_DATA
  root_causes:
  - FETCH_LARGE_DATA
  - INSERT_LARGE_DATA
  number_of_labels_pred: 3
agents:
- type: BaseAgent
  agent_id: agent1
  profile: 'agent1 will explore the possibility of INSERT_LARGE_DATA as a root cause.
    Recommended tables: `pg_stat_statements`. You can search for INSERTs.'
- type: BaseAgent
  agent_id: agent2
  profile: 'agent2 will explore the possibility of LOCK_CONTENTION as a root cause.
    Recommended tables: `pg_locks`.'
- type: BaseAgent
  agent_id: agent3
  profile: 'agent3 will explore the possibility of VACUUM as a root cause. Recommended
    to search for inappropiate VACUUMs from `pg_stat_all_tables`: SELECT query, calls,
    total_plan_time, rows, mean_plan_time FROM pg_stat_statements WHERE query LIKE
    ''VACUUM%'';'
- type: BaseAgent
  agent_id: agent4
  profile: 'agent4 will explore the possibility of REDUNDANT_INDEX as a root cause.
    Recommended tables: `pg_stat_user_indexes`, `pg_indexes`.'
- type: BaseAgent
  agent_id: agent5
  profile: agent5 will explore the possibility of FETCH_LARGE_DATA as a root cause.
    Recommended to search for SELECTs from `pg_stat_statements`.
memory:
  type: SharedMemory
metrics:
  accuracy: true
  response_time: true
output:
  file_path: result/result_gpt-3.5-turbo/SOCIAL_MEDIA_FETCH_LARGE_DATA_INSERT_LARGE_DATA_RESULT.json
engine_planner:
  initial_progress: Starting the simulation.
