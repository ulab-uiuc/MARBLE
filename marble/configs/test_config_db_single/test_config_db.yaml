coordinate_mode: star
relationships: []
llm: "gpt-4o-mini"

environment:
  type: DB
  name: "DB Simulation Environment"
  max_iterations: 5
  init_sql: |
    ALTER SYSTEM SET log_min_messages = 'error';
    CREATE TABLE device_telemetry (
        telemetry_id SERIAL PRIMARY KEY,
        device_id INTEGER,
        timestamp TIMESTAMP,
        power_consumption FLOAT,
        network_latency FLOAT,
        cpu_usage FLOAT,
        memory_usage FLOAT
    );
    INSERT INTO device_telemetry (device_id, timestamp, power_consumption, network_latency, cpu_usage, memory_usage) VALUES
    (1, NOW() - INTERVAL '2 hours', 50.5, 20.1, 30.2, 40.3),
    (2, NOW() - INTERVAL '1 hour 30 minutes', 60.5, 25.1, 35.2, 45.3),
    (3, NOW() - INTERVAL '1 hour', 70.5, 30.1, 40.2, 50.3),
    (4, NOW() - INTERVAL '45 minutes', 80.5, 35.1, 45.2, 55.3),
    (5, NOW() - INTERVAL '30 minutes', 90.5, 40.1, 50.2, 60.3),
    (6, NOW() - INTERVAL '15 minutes', 100.5, 45.1, 55.2, 65.3),
    (7, NOW() - INTERVAL '10 minutes', 110.5, 50.1, 60.2, 70.3),
    (8, NOW() - INTERVAL '5 minutes', 120.5, 55.1, 65.2, 75.3),
    (9, NOW() - INTERVAL '1 minute', 130.5, 60.1, 70.2, 80.3),
    (10, NOW(), 140.5, 65.1, 75.2, 85.3);
  test_sql: |
    SELECT 
        device_id,
        metric_name,
        AVG(metric_value) as avg_value,
        COUNT(*) as reading_count
    FROM device_telemetry
    WHERE reading_timestamp > NOW() - INTERVAL '1 hour'
    AND metric_name = 'power_consumption'
    AND status_code = 'OK'
    GROUP BY device_id, metric_name
    HAVING COUNT(*) > 10
    ORDER BY avg_value DESC;

communication: False

task:
  content: "Within the sysbench database, a smart grid monitoring system tracks real-time power consumption and performance metrics for 50,000 smart meters and grid sensors. 
  The 'device_telemetry' table collects various metrics including power consumption, network latency, CPU usage, and memory usage, generating over 2 million readings per hour. 
  The system requires frequent querying of recent data for real-time analytics and anomaly detection, particularly focusing on power consumption patterns. 
  Despite the high query frequency on timestamp and metric_name columns, the table lacks appropriate indexes, forcing full table scans for time-series analysis queries. 
  The table structure includes detailed telemetry data with timestamp precision to seconds and various categorical columns used in filtering and aggregation operations.
  Now during operation, the database monitoring system has triggered an alert.
  Analyze the database alerts & outputs and find out the reason that caused it. 
  The planner should ask different experts to work on same task, and summarize their opinions into a final prediction. 
  They can only do 3 things with tools. 
  First is get alert. 
  The second thing they can do is check whether a metric is abnormal using a statistical method. 
  They can check: cpu_usage, memory_usage, network, and io. 
  The third thing they can do is match diagnostic knowledge based on the expert and the four metrics, to guess what has caused the problem."
  output_format: |
    Please choose the most likely cause of the database anomaly from the following list, based on the expert agents: 
    'Sync Commits', 'Many Inserts', 'High Updates', 'Many Deletes', 'Index Missing', 'Redundant Indexes', 'Large Data Insert', 'Large Data Fetch', 'Poor Join Performance', 'Correlated Subquery'.
    You can ONLY CHOOSE ONE.
  labels: 
    - 'Sync Commits'
    - 'Many Inserts'
    - 'High Updates'
    - 'Many Deletes'
    - 'Index Missing'
    - 'Redundant Indexes'
    - 'Large Data Insert'
    - 'Large Data Fetch'
    - 'Poor Join Performance'
    - 'Correlated Subquery'
  root_causes: 
    - 'Index Missing'
  number_of_labels_pred: 1

agents:
  - type: agent1
    agent_id: ConfigurationExpert
    profile: "agent1 is a ConfigurationExpert that specializes in system configurations and optimizations."
  - type: BaseAgent
    agent_id: agent2
    profile: "agent2 is a CpuExpert that specializes in CPU architecture, performance, and optimizations."
  - type: BaseAgent
    agent_id: agent3
    profile: "agent3 is a WorkloadExpert that specializes in analyzing workloads, resource allocation, and optimization for efficiency."
memory:
  type: SharedMemory
  # Additional memory configurations if needed

metrics: 
  accuracy: true
  response_time: true

engine_planner:
  initial_progress: "Starting the simulation."
  # Additional engine planner configurations if needed