coordinate_mode: star
relationships: []
llm: "gpt-4o-mini"

environment:
  type: DB
  name: "DB Simulation Environment"
  max_iterations: 5
  init_sql: ""
      
  anomalies:  
    - anomaly: LOCK_CONTENTION
      threads: 100
      ncolumn: 20
      nrow:    20000
      colsize: 100

communication: False

task:
  content: |
    Recently, during operation, the database monitoring system has triggered an alert. Use sql queries to the - **Insert-related issues**: `pg_stat_activity` (for running queries) and `pg_stat_statements` (for detailed query stats).- **Lock contention**: `pg_locks` (for lock waits and contention) and `pg_stat_activity` (for identifying blocked queries).- **Redundant indexes**: `pg_stat_user_indexes` (for index usage) and `pg_indexes` (for index definitions).- **VACUUM-related issues**: `pg_stat_all_tables` (detailed statistics about vacuuming, auto vacuuming, and analyze operations for each table). table to find out what is wrong, and find out the reason that caused it. The root cause can be only two of the following: 'INSERT_LARGE_DATA', 'MISSING_INDEXES', 'LOCK_CONTENTION', 'VACUUM', 'REDUNDANT_INDEX', 'FETCH_LARGE_DATA,CORRELATED_SUBQUERY', 'POOR_JOIN_PERFORMANCE,CPU_CONTENTION'. The planner should assign different agent to analyze possbility for each root cause and make final decision. Please make the decision after using all these tools, as a premature decision may lead to incorrect conclusions.
  output_format: |
    Please make the decision after exploring all rootcauses, as a premature decision may lead to incorrect conclusions.
    Please choose the most likely cause of the database anomaly from the following list, based on the expert agents: 
    'INSERT_LARGE_DATA', 'MISSING_INDEXES', 'LOCK_CONTENTION', 'VACUUM', 'REDUNDANT_INDEX', 'FETCH_LARGE_DATA'
    You can ONLY CHOOSE two.
    You have access to the Database, and you can perform queries to get the required information.
    These tables include:
    - `pg_stat_activity` (for running queries)
    - `pg_stat_statements` (for detailed query stats)
    - `pg_locks` (for lock waits and contention)
    - `pg_stat_user_indexes` (for index usage)
    - `pg_indexes` (for index definitions)
    - `pg_stat_all_tables` (detailed statistics about vacuuming, auto vacuuming, and analyze operations for each table)
    - `pg_stat_progress_vacuum` (for vacuum progress)
    - `pg_stat_user_tables` (for dead tuples and vacuum stats)
  
  labels: 
    - 'INSERT_LARGE_DATA'
    - 'MISSING_INDEXES'
    - 'LOCK_CONTENTION'
    - 'VACUUM'
    - 'REDUNDANT_INDEX'
    - 'FETCH_LARGE_DATA'
  root_causes: 
    - 'LOCK_CONTENTION'
  number_of_labels_pred: 2

agents:
  - type: BaseAgent
    agent_id: agent1
    profile: "agent1 will query the - **Insert-related issues**: `pg_stat_activity` (for running queries) and `pg_stat_statements` (for detailed query stats).- **Lock contention**: `pg_locks` (for lock waits and contention) and `pg_stat_activity` (for identifying blocked queries).- **Redundant indexes**: `pg_stat_user_indexes` (for index usage) and `pg_indexes` (for index definitions).- **VACUUM-related issues**: `pg_stat_all_tables` (detailed statistics about vacuuming, auto vacuuming, and analyze operations for each table). table and learn from the RAG system to identify the root cause of the database anomaly."
  - type: BaseAgent
    agent_id: agent2
    profile: "agent2 will query the - **Insert-related issues**: `pg_stat_activity` (for running queries) and `pg_stat_statements` (for detailed query stats).- **Lock contention**: `pg_locks` (for lock waits and contention) and `pg_stat_activity` (for identifying blocked queries).- **Redundant indexes**: `pg_stat_user_indexes` (for index usage) and `pg_indexes` (for index definitions).- **VACUUM-related issues**: `pg_stat_all_tables` (detailed statistics about vacuuming, auto vacuuming, and analyze operations for each table). table and learn from the RAG system to identify the root cause of the database anomaly."
  - type: BaseAgent
    agent_id: agent3
    profile: "agent3 will query the - **Insert-related issues**: `pg_stat_activity` (for running queries) and `pg_stat_statements` (for detailed query stats).- **Lock contention**: `pg_locks` (for lock waits and contention) and `pg_stat_activity` (for identifying blocked queries).- **Redundant indexes**: `pg_stat_user_indexes` (for index usage) and `pg_indexes` (for index definitions).- **VACUUM-related issues**: `pg_stat_all_tables` (detailed statistics about vacuuming, auto vacuuming, and analyze operations for each table). table and learn from the RAG system to identify the root cause of the database anomaly."
  - type: BaseAgent
    agent_id: agent4
    profile: "agent4 will query the - **Insert-related issues**: `pg_stat_activity` (for running queries) and `pg_stat_statements` (for detailed query stats).- **Lock contention**: `pg_locks` (for lock waits and contention) and `pg_stat_activity` (for identifying blocked queries).- **Redundant indexes**: `pg_stat_user_indexes` (for index usage) and `pg_indexes` (for index definitions).- **VACUUM-related issues**: `pg_stat_all_tables` (detailed statistics about vacuuming, auto vacuuming, and analyze operations for each table). table and learn from the RAG system to identify the root cause of the database anomaly."
  - type: BaseAgent
    agent_id: agent5
    profile: "agent5 will query the - **Insert-related issues**: `pg_stat_activity` (for running queries) and `pg_stat_statements` (for detailed query stats).- **Lock contention**: `pg_locks` (for lock waits and contention) and `pg_stat_activity` (for identifying blocked queries).- **Redundant indexes**: `pg_stat_user_indexes` (for index usage) and `pg_indexes` (for index definitions).- **VACUUM-related issues**: `pg_stat_all_tables` (detailed statistics about vacuuming, auto vacuuming, and analyze operations for each table). table and learn from the RAG system to identify the root cause of the database anomaly."
  - type: BaseAgent
    agent_id: agent6
    profile: "agent6 will query the - **Insert-related issues**: `pg_stat_activity` (for running queries) and `pg_stat_statements` (for detailed query stats).- **Lock contention**: `pg_locks` (for lock waits and contention) and `pg_stat_activity` (for identifying blocked queries).- **Redundant indexes**: `pg_stat_user_indexes` (for index usage) and `pg_indexes` (for index definitions).- **VACUUM-related issues**: `pg_stat_all_tables` (detailed statistics about vacuuming, auto vacuuming, and analyze operations for each table). table and learn from the RAG system to identify the root cause of the database anomaly."

memory:
  type: SharedMemory

metrics: 
  accuracy: true
  response_time: true

output:
  file_path: "result/E_COMMERCE_LOCK_CONTENTION_RESULT.json"

engine_planner:
  initial_progress: "Starting the simulation."