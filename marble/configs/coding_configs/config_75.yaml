coordinate_mode: graph

relationships:
  - [agent1, agent2, "collaborates with"]
  - [agent2, agent1, "collaborates with"]
  - [agent1, agent3, "collaborates with"]
  - [agent3, agent1, "collaborates with"]
  # - [agent1, agent3, "supervises"]
  # - [agent1, agent4, "supervises"]
  # - [agent2, agent3, "collaborates with"]
  - [agent2, agent3, "collaborates with"]
  - [agent3, agent2, "collaborates with"]
  # - [agent3, agent4, "collaborates with"]

llm: "together_ai/meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo"

environment:
  type: Coding
  name: "Coding Environment"
  workspace_dir: "workspace"
  max_iterations: 5

task:
  content: |-
    Software Development Task:

    Please write a collaborative game development framework called Multi-Agent Shooter Framework (MASF). MASF is a comprehensive system that enables multiple AI agents to work together in developing and enhancing a shooter game, focusing on both the frontend and backend aspects of the game. The system facilitates the creation of a dynamic and interactive game environment where agents can contribute to game mechanics, user interface design, and backend logic, ensuring a seamless and engaging experience for players.
    1. Implementation requirements:
       - The frontend domain should be responsible for designing and implementing the user interface, including the game screen, scoreboards, and menus. The frontend should be developed using modern web technologies such as HTML5, CSS3, and JavaScript, and should be responsive to various screen sizes.
       - The backend domain should handle game logic, player management, and data storage. It should be built using a robust server-side framework like Node.js or Django, and should include a database (e.g., MongoDB or PostgreSQL) to store player data, game states, and leaderboard information.
       - The system should support real-time communication between the frontend and backend using WebSockets to ensure that game events and updates are synchronized across all connected clients. Additionally, the backend should provide APIs for the frontend to interact with, such as fetching player data, submitting scores, and updating game states.
       - The Multi-Agent Shooter Framework should include a collaboration layer that allows multiple AI agents to contribute to the game's development. Each agent should be able to specialize in a specific domain (e.g., one agent for frontend design, another for backend logic) and collaborate through a shared development environment. The framework should provide tools and APIs for agents to communicate, share code, and integrate their contributions seamlessly.
       - The game should feature a variety of shooting challenges, including target practice, enemy waves, and timed missions. Each challenge should have adjustable difficulty levels and provide players with feedback on their performance, such as accuracy and reaction time.
       - The system should include a robust testing and debugging environment to ensure that the game functions correctly and that the contributions from multiple agents are integrated without conflicts. The testing environment should support automated and manual testing, and should provide detailed logs and reports for troubleshooting.


    2. Project structure:
       - solution.py (main implementation)

    3. Development process:
       - Developer: Create the code.
       - Developer: Revise the code.
       - Developer: Optimize the code.

    If there are multiple files, please put them all in solution.py, but remember to add the file name in the following format:
    ```python
    # file_name_1.py
    # your code here

    # file_name_2.py
    # your code here

    # file_name_3.py
    # your code here
    ```

    Please work together to complete this task following software engineering best practices.

  output_format: |
    The final deliverable should include:
    solution.py

agents:
  - type: CodingAgent
    agent_id: agent1
    profile: |
      I am a Senior Software Developer specialized in Python development.
      I am good at creating the code framework from scratch based on the task description and requirements.
      So I **have to** call "create_code" action to create the code in the first iteration at first.
      I am **very terrible** at do further modifications since I am not so creative or careful so I **have to** let agent 2 or agent 3 revise the code after I create the code and I **can't** call "give_advice_and_revise_code" action.
      Agent 2 is better at adding missing functions so it's better to let agent 2 revise the code at first.
      Agent 3 is better at fixing existing issues and optimizing the code so it's better to let agent 3 revise the code after agent 2 has revised the code so that the code is more optimized.


  - type: CodingAgent
    agent_id: agent2
    profile: |
      I am a Senior Software Developer specialized in Python development.
      I am better at adding missing functionality based on my decent understanding and compliance to the task description and requirements.
      I **have to** call "give_advice_and_revise_code" action to give advice to the code and revise the code.
      I **can't** call "create_code" action since I am not good at creating the code framework from scratch.
      I can let agent 3 to make the code more optimized after I have added the missing functionality.

  - type: CodingAgent
    agent_id: agent3
    profile: |
      I am a Senior Software Developer specialized in Python development.
      I am better at fixing existing issues and optimizing the code based on my innovation and creativity.
      I **have to** call "give_advice_and_revise_code" action to give advice to the code and revise the code.
      I **can't** call "create_code" action since I am not good at creating the code framework from scratch.
      I can let agent 2 to add the missing functionality after I have fixed the existing issues and optimized the code.

memory:
  type: SharedMemory

metrics:
  evaluate_llm: "gpt-4o-mini"
  code_quality: true
  test_coverage: true
  collaboration_effectiveness: true

engine_planner:
  initial_progress: "Starting the software development project with team coordination."

output:
  format: jsonl
  file_path: "result/development_output.jsonl"
