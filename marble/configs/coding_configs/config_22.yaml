coordinate_mode: graph

relationships:
  - [agent1, agent2, "collaborates with"]
  - [agent2, agent1, "collaborates with"]
  - [agent1, agent3, "collaborates with"]
  - [agent3, agent1, "collaborates with"]
  # - [agent1, agent3, "supervises"]
  # - [agent1, agent4, "supervises"]
  # - [agent2, agent3, "collaborates with"]
  - [agent2, agent3, "collaborates with"]
  - [agent3, agent2, "collaborates with"]
  # - [agent3, agent4, "collaborates with"]

llm: "together_ai/meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo"

environment:
  type: Coding
  name: "Coding Environment"
  workspace_dir: "workspace"
  max_iterations: 5

task:
  content: |-
    Software Development Task:

    Please write a software application called FamilyAdventureQuest. FamilyAdventureQuest is a collaborative platform that creates interactive and educational quests for families to complete together. The application combines elements of storytelling, puzzles, and physical activities to encourage learning and bonding among family members. Each quest is designed to be completed in stages, with each stage building on the previous one to ensure a cohesive and engaging experience.
    1. Implementation requirements:
       - 1. **Quest Creation Module**: Develop a module where parents can create custom quests by selecting from a library of pre-defined storylines, puzzles, and physical challenges. The module should allow parents to set specific tasks, such as solving math problems, completing a scavenger hunt, or engaging in a physical activity. This module must be completed before any quests can be assigned to family members.
       - 2. **Quest Assignment and Progress Tracking**: Implement a system for assigning quests to family members and tracking their progress. Each quest should have multiple stages, and completion of one stage should unlock the next. The system should notify family members when a new stage is available and provide real-time updates on their progress. This module depends on the completion of the Quest Creation Module.
       - 3. **Interactive Storytelling**: Develop a feature that integrates an interactive storytelling component into each quest. The story should adapt based on the family's progress, providing feedback and encouragement. This feature should enhance the overall engagement and make the quest more immersive. The Interactive Storytelling feature depends on the Quest Assignment and Progress Tracking module being in place.
       - 4. **Achievements and Rewards System**: Create a system that awards achievements and rewards to family members for completing quests and stages. Achievements can include badges, points, and virtual trophies. The system should also allow for the creation of leaderboards to foster a sense of competition and collaboration among family members. This module should be implemented after the Quest Assignment and Progress Tracking module is fully functional.
       - 5. **Family Collaboration Tools**: Introduce tools that facilitate collaboration among family members, such as chat features, shared notes, and the ability to tag other family members in tasks. These tools should help family members communicate and coordinate their efforts effectively. This module depends on the Quest Assignment and Progress Tracking module being complete.


    2. Project structure:
       - solution.py (main implementation)

    3. Development process:
       - Developer: Create the code.
       - Developer: Revise the code.
       - Developer: Optimize the code.

    If there are multiple files, please put them all in solution.py, but remember to add the file name in the following format:
    ```python
    # file_name_1.py
    # your code here

    # file_name_2.py
    # your code here

    # file_name_3.py
    # your code here
    ```

    Please work together to complete this task following software engineering best practices.

  output_format: |
    The final deliverable should include:
    solution.py

agents:
  - type: CodingAgent
    agent_id: agent1
    profile: |
      I am a Senior Software Developer specialized in Python development.
      I am good at creating the code framework from scratch based on the task description and requirements.
      So I **have to** call "create_code" action to create the code in the first iteration at first.
      I am **very terrible** at do further modifications since I am not so creative or careful so I **have to** let agent 2 or agent 3 revise the code after I create the code and I **can't** call "give_advice_and_revise_code" action.
      Agent 2 is better at adding missing functions so it's better to let agent 2 revise the code at first.
      Agent 3 is better at fixing existing issues and optimizing the code so it's better to let agent 3 revise the code after agent 2 has revised the code so that the code is more optimized.


  - type: CodingAgent
    agent_id: agent2
    profile: |
      I am a Senior Software Developer specialized in Python development.
      I am better at adding missing functionality based on my decent understanding and compliance to the task description and requirements.
      I **have to** call "give_advice_and_revise_code" action to give advice to the code and revise the code.
      I **can't** call "create_code" action since I am not good at creating the code framework from scratch.
      I can let agent 3 to make the code more optimized after I have added the missing functionality.

  - type: CodingAgent
    agent_id: agent3
    profile: |
      I am a Senior Software Developer specialized in Python development.
      I am better at fixing existing issues and optimizing the code based on my innovation and creativity.
      I **have to** call "give_advice_and_revise_code" action to give advice to the code and revise the code.
      I **can't** call "create_code" action since I am not good at creating the code framework from scratch.
      I can let agent 2 to add the missing functionality after I have fixed the existing issues and optimized the code.

memory:
  type: SharedMemory

metrics:
  evaluate_llm: "gpt-4o-mini"
  code_quality: true
  test_coverage: true
  collaboration_effectiveness: true

engine_planner:
  initial_progress: "Starting the software development project with team coordination."

output:
  format: jsonl
  file_path: "result/development_output.jsonl"
