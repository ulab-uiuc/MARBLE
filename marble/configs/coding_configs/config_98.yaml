coordinate_mode: graph

relationships:
  - [agent1, agent2, "collaborates with"]
  - [agent2, agent1, "collaborates with"]
  - [agent1, agent3, "collaborates with"]
  - [agent3, agent1, "collaborates with"]
  # - [agent1, agent3, "supervises"]
  # - [agent1, agent4, "supervises"]
  # - [agent2, agent3, "collaborates with"]
  - [agent2, agent3, "collaborates with"]
  - [agent3, agent2, "collaborates with"]
  # - [agent3, agent4, "collaborates with"]

llm: "together_ai/meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo"

environment:
  type: Coding
  name: "Coding Environment"
  workspace_dir: "workspace"
  max_iterations: 5

task:
  content: |-
    Software Development Task:

    Please write a software application called Travel_Collaborator that enables users to plan, share, and collaborate on travel itineraries. Travel_Collaborator is a web-based platform that allows users to create detailed travel plans, invite others to contribute, and manage the entire travel planning process collaboratively. The application supports the creation of shared itineraries, where multiple users can add, modify, and comment on activities, accommodations, and travel routes. It also includes features for real-time communication and synchronization of changes among all participants.
    1. Implementation requirements:
       - 1. User Authentication and Profile Management: Implement a secure user registration and login system. Each user should have a profile where they can manage their personal information and privacy settings. This component must be completed before any other features that require user interaction.
       - 2. Itinerary Creation and Management: Develop a feature that allows users to create and manage travel itineraries. Users should be able to add destinations, activities, and accommodations, set dates and times, and organize the itinerary in a chronological order. This feature depends on the completion of the user authentication system.
       - 3. Collaboration and Sharing: Enable users to invite others to join their itineraries and collaborate on the planning process. Users should be able to add, edit, and comment on activities and accommodations. Real-time updates and notifications should be implemented to keep all collaborators informed. This feature depends on the completion of the itinerary creation and management system.
       - 4. Communication Tools: Integrate a chat or messaging system within the application to facilitate real-time communication among collaborators. Users should be able to discuss and coordinate their travel plans directly within the app. This feature depends on the completion of the collaboration and sharing system.
       - 5. Synchronization and Conflict Resolution: Implement a system to automatically synchronize changes made by multiple users and handle conflicts that may arise due to simultaneous edits. This feature depends on the completion of the collaboration and sharing system.
       - 6. User Reviews and Recommendations: Allow users to rate and review destinations, activities, and accommodations. Implement a recommendation system that suggests popular and highly-rated options based on user preferences and past reviews. This feature can be developed concurrently with the communication tools but must be integrated after the collaboration and sharing system is complete.


    2. Project structure:
       - solution.py (main implementation)

    3. Development process:
       - Developer: Create the code.
       - Developer: Revise the code.
       - Developer: Optimize the code.

    If there are multiple files, please put them all in solution.py, but remember to add the file name in the following format:
    ```python
    # file_name_1.py
    # your code here

    # file_name_2.py
    # your code here

    # file_name_3.py
    # your code here
    ```

    Please work together to complete this task following software engineering best practices.

  output_format: |
    The final deliverable should include:
    solution.py

agents:
  - type: CodingAgent
    agent_id: agent1
    profile: |
      I am a Senior Software Developer specialized in Python development.
      I am good at creating the code framework from scratch based on the task description and requirements.
      So I **have to** call "create_code" action to create the code in the first iteration at first.
      I am **very terrible** at do further modifications since I am not so creative or careful so I **have to** let agent 2 or agent 3 revise the code after I create the code and I **can't** call "give_advice_and_revise_code" action.
      Agent 2 is better at adding missing functions so it's better to let agent 2 revise the code at first.
      Agent 3 is better at fixing existing issues and optimizing the code so it's better to let agent 3 revise the code after agent 2 has revised the code so that the code is more optimized.


  - type: CodingAgent
    agent_id: agent2
    profile: |
      I am a Senior Software Developer specialized in Python development.
      I am better at adding missing functionality based on my decent understanding and compliance to the task description and requirements.
      I **have to** call "give_advice_and_revise_code" action to give advice to the code and revise the code.
      I **can't** call "create_code" action since I am not good at creating the code framework from scratch.
      I can let agent 3 to make the code more optimized after I have added the missing functionality.

  - type: CodingAgent
    agent_id: agent3
    profile: |
      I am a Senior Software Developer specialized in Python development.
      I am better at fixing existing issues and optimizing the code based on my innovation and creativity.
      I **have to** call "give_advice_and_revise_code" action to give advice to the code and revise the code.
      I **can't** call "create_code" action since I am not good at creating the code framework from scratch.
      I can let agent 2 to add the missing functionality after I have fixed the existing issues and optimized the code.

memory:
  type: SharedMemory

metrics:
  evaluate_llm: "gpt-4o-mini"
  code_quality: true
  test_coverage: true
  collaboration_effectiveness: true

engine_planner:
  initial_progress: "Starting the software development project with team coordination."

output:
  format: jsonl
  file_path: "result/development_output.jsonl"
