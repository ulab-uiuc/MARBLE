coordinate_mode: graph

relationships:
  - [agent1, agent2, "collaborates with"]
  - [agent2, agent1, "collaborates with"]
  - [agent1, agent3, "collaborates with"]
  - [agent3, agent1, "collaborates with"]
  # - [agent1, agent3, "supervises"]
  # - [agent1, agent4, "supervises"]
  # - [agent2, agent3, "collaborates with"]
  - [agent2, agent3, "collaborates with"]
  - [agent3, agent2, "collaborates with"]
  # - [agent3, agent4, "collaborates with"]

llm: "together_ai/meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo"

environment:
  type: Coding
  name: "Coding Environment"
  workspace_dir: "workspace"
  max_iterations: 5

task:
  content: |-
    Software Development Task:

    Please write a program called PriceTrackerCollaborator that enables multiple users to collaboratively track and manage price alerts for products they are interested in purchasing. PriceTrackerCollaborator is a web-based application that allows users to set price thresholds for specific products, receive notifications when prices drop, and share these alerts with other users in a group or community setting. The application also provides insights on the best time to make a purchase and allows users to compare prices across different online retailers.
    1. Implementation requirements:
       - The application should allow users to register and log in using their email and a password.
       - Users should be able to create a group or join existing groups to share price alerts with other users.
       - Each user should be able to add products to their watchlist by entering the product URL or by searching for the product within the application.
       - For each product, users should be able to set a price threshold and receive notifications when the price drops below this threshold.
       - The application should provide real-time price updates for the products in the watchlist and notify users via email or in-app notifications.
       - Users should be able to share price alerts within their group, and group members should receive notifications about the shared alerts.
       - The application should have a feature to compare prices across different online retailers for the same product.
       - The application should provide insights on historical price trends and suggest the best time to make a purchase.
       - Comprehensive test cases should be defined, including input scenarios such as adding a product, setting a price threshold, receiving notifications, sharing alerts, and comparing prices.
       - Test cases should also cover edge cases such as invalid URLs, non-existent products, and handling of multiple price thresholds for the same product.
       - The application should handle concurrent access from multiple users and ensure data consistency and integrity.


    2. Project structure:
       - solution.py (main implementation)

    3. Development process:
       - Developer: Create the code.
       - Developer: Revise the code.
       - Developer: Optimize the code.

    If there are multiple files, please put them all in solution.py, but remember to add the file name in the following format:
    ```python
    # file_name_1.py
    # your code here

    # file_name_2.py
    # your code here

    # file_name_3.py
    # your code here
    ```

    Please work together to complete this task following software engineering best practices.

  output_format: |
    The final deliverable should include:
    solution.py

agents:
  - type: CodingAgent
    agent_id: agent1
    profile: |
      I am a Senior Software Developer specialized in Python development.
      I am good at creating the code framework from scratch based on the task description and requirements.
      So I **have to** call "create_code" action to create the code in the first iteration at first.
      I am **very terrible** at do further modifications since I am not so creative or careful so I **have to** let agent 2 or agent 3 revise the code after I create the code and I **can't** call "give_advice_and_revise_code" action.
      Agent 2 is better at adding missing functions so it's better to let agent 2 revise the code at first.
      Agent 3 is better at fixing existing issues and optimizing the code so it's better to let agent 3 revise the code after agent 2 has revised the code so that the code is more optimized.


  - type: CodingAgent
    agent_id: agent2
    profile: |
      I am a Senior Software Developer specialized in Python development.
      I am better at adding missing functionality based on my decent understanding and compliance to the task description and requirements.
      I **have to** call "give_advice_and_revise_code" action to give advice to the code and revise the code.
      I **can't** call "create_code" action since I am not good at creating the code framework from scratch.
      I can let agent 3 to make the code more optimized after I have added the missing functionality.

  - type: CodingAgent
    agent_id: agent3
    profile: |
      I am a Senior Software Developer specialized in Python development.
      I am better at fixing existing issues and optimizing the code based on my innovation and creativity.
      I **have to** call "give_advice_and_revise_code" action to give advice to the code and revise the code.
      I **can't** call "create_code" action since I am not good at creating the code framework from scratch.
      I can let agent 2 to add the missing functionality after I have fixed the existing issues and optimized the code.

memory:
  type: SharedMemory

metrics:
  evaluate_llm: "gpt-4o-mini"
  code_quality: true
  test_coverage: true
  collaboration_effectiveness: true

engine_planner:
  initial_progress: "Starting the software development project with team coordination."

output:
  format: jsonl
  file_path: "result/development_output.jsonl"
