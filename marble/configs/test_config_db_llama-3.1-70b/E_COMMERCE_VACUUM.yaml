coordinate_mode: graph
relationships:
- - agent1
  - agent2
  - collaborate with
- - agent1
  - agent3
  - collaborate with
- - agent1
  - agent4
  - collaborate with
- - agent1
  - agent5
  - collaborate with
- - agent2
  - agent3
  - collaborate with
- - agent2
  - agent4
  - collaborate with
- - agent2
  - agent5
  - collaborate with
- - agent3
  - agent4
  - collaborate with
- - agent3
  - agent5
  - collaborate with
- - agent4
  - agent5
  - collaborate with
llm: fireworks_ai/accounts/fireworks/models/llama-v3p1-70b-instruct
environment:
  type: DB
  name: DB Simulation Environment
  max_iterations: 5
  init_sql: "-- 1. Customers table (stores customer info)\nCREATE TABLE customers\
    \ (\n    customer_id SERIAL PRIMARY KEY,  -- Unique customer ID\n    first_name\
    \ VARCHAR(100),\n    last_name VARCHAR(100),\n    email VARCHAR(255) UNIQUE NOT\
    \ NULL,  -- Unique email\n    phone VARCHAR(20),\n    address VARCHAR(255),\n\
    \    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n-- 2. Products table\
    \ (stores product details)\nCREATE TABLE products (\n    product_id SERIAL PRIMARY\
    \ KEY,  -- Unique product ID\n    product_name VARCHAR(255) NOT NULL,\n    description\
    \ TEXT,\n    price DECIMAL(10, 2) NOT NULL,  -- Product price\n    stock_quantity\
    \ INT NOT NULL,    -- Available stock\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n\
    );\n\n-- 3. Orders table (stores orders placed by customers)\nCREATE TABLE orders\
    \ (\n    order_id SERIAL PRIMARY KEY,  -- Unique order ID\n    customer_id INT\
    \ REFERENCES customers(customer_id),  -- Foreign key to customers\n    order_date\
    \ TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    status VARCHAR(50) DEFAULT 'pending'\
    \  -- Order status (e.g., pending, completed)\n);\n\n-- 4. Order_Items table (stores\
    \ products in each order)\nCREATE TABLE order_items (\n    order_item_id SERIAL\
    \ PRIMARY KEY,  -- Unique order item ID\n    order_id INT REFERENCES orders(order_id)\
    \ ON DELETE CASCADE,  -- Foreign key to orders\n    product_id INT REFERENCES\
    \ products(product_id),  -- Foreign key to products\n    quantity INT NOT NULL,\
    \  -- Quantity of the product in the order\n    price DECIMAL(10, 2) NOT NULL\
    \  -- Price of the product at the time of the order\n);\n\n-- 5. Payments table\
    \ (stores payments for orders)\nCREATE TABLE payments (\n    payment_id SERIAL\
    \ PRIMARY KEY,  -- Unique payment ID\n    order_id INT REFERENCES orders(order_id)\
    \ ON DELETE CASCADE,  -- Foreign key to orders\n    payment_date TIMESTAMP DEFAULT\
    \ CURRENT_TIMESTAMP,\n    amount DECIMAL(10, 2) NOT NULL,  -- Payment amount\n\
    \    payment_method VARCHAR(50),  -- Payment method (e.g., credit card, PayPal)\n\
    \    status VARCHAR(50) DEFAULT 'completed'  -- Payment status (e.g., completed,\
    \ failed)\n);\n\n-- Insert customers\nINSERT INTO customers (first_name, last_name,\
    \ email, phone, address) \nVALUES \n('Alice', 'Smith', 'alice.smith@example.com',\
    \ '123-456-7890', '123 Main St, Springfield'),\n('Bob', 'Johnson', 'bob.johnson@example.com',\
    \ '234-567-8901', '456 Oak St, Springfield');\n\n-- Insert products\nINSERT INTO\
    \ products (product_name, description, price, stock_quantity) \nVALUES \n('Laptop',\
    \ 'High-performance laptop', 999.99, 10),\n('Smartphone', 'Latest model smartphone',\
    \ 799.99, 15),\n('Headphones', 'Noise-cancelling headphones', 199.99, 25);\n\n\
    -- Insert an order for Alice\nINSERT INTO orders (customer_id, order_date, status)\
    \ \nVALUES \n(1, '2024-12-13 10:00:00', 'pending');\n\n-- Insert order items for\
    \ Alice's order\nINSERT INTO order_items (order_id, product_id, quantity, price)\
    \ \nVALUES \n(1, 1, 1, 999.99),  -- 1 Laptop\n(1, 3, 2, 199.99);  -- 2 Headphones\n\
    \n-- Insert a payment for Alice's order\nINSERT INTO payments (order_id, amount,\
    \ payment_method, status) \nVALUES \n(1, 1399.97, 'Credit Card', 'completed');\n\
    \n-- Insert an order for Bob\nINSERT INTO orders (customer_id, order_date, status)\
    \ \nVALUES \n(2, '2024-12-13 12:00:00', 'pending');\n\n-- Insert order items for\
    \ Bob's order\nINSERT INTO order_items (order_id, product_id, quantity, price)\
    \ \nVALUES \n(2, 2, 1, 799.99);  -- 1 Smartphone\n\n-- Insert a payment for Bob's\
    \ order\nINSERT INTO payments (order_id, amount, payment_method, status) \nVALUES\
    \ \n(2, 799.99, 'PayPal', 'completed');\n\nSELECT oi.order_item_id, p.product_name,\
    \ oi.quantity, oi.price\nFROM order_items oi\nJOIN products p ON oi.product_id\
    \ = p.product_id\nWHERE oi.order_id = 1;  -- Get items for Alice's order (order_id\
    \ = 1)\n\nSELECT p.payment_id, p.payment_date, p.amount, p.payment_method, p.status\n\
    FROM payments p\nWHERE p.order_id = 1;  -- Get payment details for Alice's order\
    \ (order_id = 1)\n"
  anomalies:
  - anomaly: VACUUM
    threads: 100
    ncolumn: 20
    nrow: 20000
    colsize: 100
communication: false
task:
  content: 'This database is used in an e-commerce system to manage customer information,
    product details, orders, order items, and payments. It consists of five main tables:
    customers, products, orders, order items, and payments, with foreign key relationships
    between them.

    Recently, during operation, the database has seen performance issues. Use sql
    queries to find out what is wrong, and find out the reason that caused it. The
    root cause can be only two of the following: ''INSERT_LARGE_DATA'', ''MISSING_INDEXES'',
    ''LOCK_CONTENTION'', ''VACUUM'', ''REDUNDANT_INDEX'', ''FETCH_LARGE_DATA'', ''POOR_JOIN_PERFORMANCE,CPU_CONTENTION''.
    The planner should assign different agent to analyze possbility for each root
    cause and make final decision. Agents can also chat with each other to share information.  Please
    make the decision after using all these tools, as a premature decision may lead
    to incorrect conclusions.

    '
  output_format: "Please make the decision after exploring all rootcauses, as a premature\
    \ decision may lead to incorrect conclusions.\nPlease choose the most likely cause\
    \ of the database anomaly from the following list, based on the expert agents:\
    \ \n'INSERT_LARGE_DATA', 'LOCK_CONTENTION', 'VACUUM', 'REDUNDANT_INDEX', 'FETCH_LARGE_DATA'\n\
    You can ONLY CHOOSE two.\nYou have access to the Database, and you can perform\
    \ queries to get the required information. Agents can also chat with each other\
    \ to share information.\nThese tables include:\n- `pg_stat_statements` (for detailed\
    \ query stats)\n- `pg_locks` (for lock waits and contention)\n- `pg_stat_user_indexes`\
    \ (for index usage)\n- `pg_indexes` (for index definitions)\n- `pg_stat_all_tables`\
    \ (detailed statistics about vacuuming, auto vacuuming, and analyze operations\
    \ for each table)\n- `pg_stat_progress_vacuum` (for vacuum progress)\n- `pg_stat_user_tables`\
    \ (for dead tuples and vacuum stats)\n"
  labels:
  - INSERT_LARGE_DATA
  - LOCK_CONTENTION
  - VACUUM
  - REDUNDANT_INDEX
  - FETCH_LARGE_DATA
  root_causes:
  - VACUUM
  number_of_labels_pred: 2
agents:
- type: BaseAgent
  agent_id: agent1
  profile: 'agent1 will explore the possibility of INSERT_LARGE_DATA as a root cause.
    Recommended tables: `pg_stat_statements`. You can search for INSERTs.'
- type: BaseAgent
  agent_id: agent2
  profile: 'agent2 will explore the possibility of LOCK_CONTENTION as a root cause.
    Recommended tables: `pg_locks`.'
- type: BaseAgent
  agent_id: agent3
  profile: 'agent3 will explore the possibility of VACUUM as a root cause. Recommended
    to search for inappropiate VACUUMs from `pg_stat_all_tables`: SELECT query, calls,
    total_plan_time, rows, mean_plan_time FROM pg_stat_statements WHERE query LIKE
    ''VACUUM%'';'
- type: BaseAgent
  agent_id: agent4
  profile: 'agent4 will explore the possibility of REDUNDANT_INDEX as a root cause.
    Recommended tables: `pg_stat_user_indexes`, `pg_indexes`.'
- type: BaseAgent
  agent_id: agent5
  profile: agent5 will explore the possibility of FETCH_LARGE_DATA as a root cause.
    Recommended to search for SELECTs from `pg_stat_statements`.
memory:
  type: SharedMemory
metrics:
  accuracy: true
  response_time: true
output:
  file_path: result/result_llama-3.1-70b/E_COMMERCE_VACUUM_RESULT.json
engine_planner:
  initial_progress: Starting the simulation.
