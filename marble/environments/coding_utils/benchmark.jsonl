{"category": "Data Science and ML", "difficulty_level": "easy", "content": "Implement a function to calculate basic statistics (mean, median, mode, variance) for a dataset with missing values", "requirements": ["Handle missing values by either ignoring or imputing them before calculation.", "Provide functions to calculate mean, median, mode, and variance.", "Ensure the function works for both numerical lists and pandas DataFrame columns.", "Include error handling for invalid input."], "id": 1}
{"category": "Data Science and ML", "difficulty_level": "easy", "content": "Create a data cleaning function that handles outliers using IQR method", "requirements": ["Calculate the interquartile range (IQR) for the given data.", "Identify outliers based on the 1.5 * IQR rule.", "Provide an option to either remove or cap outliers.", "Ensure compatibility with pandas DataFrame."], "id": 2}
{"category": "Data Science and ML", "difficulty_level": "easy", "content": "Build a simple data visualization tool that creates scatter plots and histograms", "requirements": ["Generate scatter plots for two numerical columns.", "Create histograms for single numerical columns.", "Support saving the plots as image files.", "Use matplotlib or seaborn for visualization."], "id": 3}
{"category": "Data Science and ML", "difficulty_level": "easy", "content": "Implement a function to perform min-max and z-score normalization on numerical data", "requirements": ["Provide separate options for min-max and z-score normalization.", "Handle single numerical arrays and pandas DataFrame columns.", "Return the normalized data while preserving the input format.", "Include checks for invalid input data."], "id": 4}
{"category": "Data Science and ML", "difficulty_level": "easy", "content": "Create a simple correlation analysis tool for numerical features", "requirements": ["Calculate pairwise Pearson and Spearman correlation coefficients.", "Generate a heatmap for correlation visualization.", "Support filtering correlations above or below a given threshold.", "Ensure compatibility with pandas DataFrame."], "id": 5}
{"category": "Data Science and ML", "difficulty_level": "easy", "content": "Develop a function for one-hot encoding categorical variables", "requirements": ["Handle single and multiple categorical columns in a pandas DataFrame.", "Ensure the function creates binary columns for each unique category.", "Provide an option to drop the original categorical column.", "Include error handling for non-categorical input."], "id": 6}
{"category": "Data Science and ML", "difficulty_level": "medium", "content": "Implement matrix operations calculator supporting addition, subtraction, multiplication, and inverse", "requirements": ["Support operations for two-dimensional numerical matrices.", "Include functions for matrix addition, subtraction, multiplication, and inversion.", "Validate the dimensions of the input matrices for each operation.", "Handle cases where the matrix is not invertible."], "id": 7}
{"category": "Data Science and ML", "difficulty_level": "medium", "content": "Create a k-Nearest Neighbors classifier from scratch", "requirements": ["Support classification for numerical feature datasets.", "Include functions for calculating Euclidean distance.", "Allow the user to specify the value of k.", "Implement a function to calculate accuracy on a test dataset."], "id": 8}
{"category": "Data Science and ML", "difficulty_level": "medium", "content": "Implement logistic regression with gradient descent optimization", "requirements": ["Support binary classification with a sigmoid activation function.", "Implement gradient descent for parameter optimization.", "Provide options for learning rate and number of iterations.", "Include metrics such as accuracy and loss during training."], "id": 9}
{"category": "Data Science and ML", "difficulty_level": "medium", "content": "Build a decision tree classifier supporting both numerical and categorical features", "requirements": ["Use recursive partitioning based on information gain or Gini index.", "Handle missing values and categorical features.", "Implement tree visualization or text-based representation.", "Evaluate the classifier using test data."], "id": 10}
{"category": "Data Science and ML", "difficulty_level": "medium", "content": "Develop a principal component analysis (PCA) implementation for dimensionality reduction", "requirements": ["Calculate covariance matrix from the input data.", "Compute eigenvalues and eigenvectors for dimensionality reduction.", "Allow the user to specify the number of components to retain.", "Ensure the implementation works with numerical datasets."], "id": 11}
{"category": "Data Science and ML", "difficulty_level": "medium", "content": "Create a time series forecasting tool using exponential smoothing", "requirements": ["Support single exponential smoothing for trend analysis.", "Allow users to specify the smoothing factor (alpha).", "Provide functions to forecast future values.", "Include error handling for non-time-series input."], "id": 12}
{"category": "Data Science and ML", "difficulty_level": "medium", "content": "Implement k-means clustering with automatic k selection using elbow method", "requirements": ["Calculate centroids and cluster assignments iteratively.", "Support numerical datasets with multiple features.", "Implement the elbow method to find the optimal number of clusters.", "Provide visualization for clustering results."], "id": 13}
{"category": "Data Science and ML", "difficulty_level": "medium", "content": "Build a simple feature selection tool using mutual information and chi-square tests", "requirements": ["Calculate mutual information for feature selection.", "Perform chi-square tests for categorical features.", "Rank features based on their importance scores.", "Ensure compatibility with pandas DataFrame."], "id": 14}
{"category": "Data Science and ML", "difficulty_level": "hard", "content": "Implement a basic neural network with one hidden layer and backpropagation", "requirements": ["Support numerical datasets with multiple input features.", "Include activation functions like ReLU and sigmoid.", "Implement gradient-based backpropagation for training.", "Provide options for learning rate and number of epochs."], "id": 15}
{"category": "Data Science and ML", "difficulty_level": "hard", "content": "Create a Random Forest classifier with bootstrap sampling", "requirements": ["Support classification for numerical and categorical features.", "Implement decision trees as base learners.", "Use bootstrap sampling to create training subsets.", "Include functionality for evaluating feature importance."], "id": 16}
{"category": "Data Science and ML", "difficulty_level": "hard", "content": "Develop a cross-validation framework with multiple scoring metrics", "requirements": ["Support k-fold cross-validation for model evaluation.", "Calculate metrics like accuracy, precision, recall, and F1-score.", "Provide flexibility to work with different classification models.", "Include visualization for cross-validation results."], "id": 17}
{"category": "Data Science and ML", "difficulty_level": "hard", "content": "Build an ensemble learning system combining multiple base models", "requirements": ["Implement methods like bagging and boosting.", "Combine predictions from multiple base models (e.g., SVM, decision trees).", "Evaluate ensemble performance using test data.", "Provide flexibility to add or remove base models."], "id": 18}
{"category": "Data Science and ML", "difficulty_level": "hard", "content": "Implement a basic recommendation system using collaborative filtering", "requirements": ["Support user-based and item-based collaborative filtering.", "Calculate similarity scores using cosine or Pearson correlation.", "Provide recommendations for a given user or item.", "Handle sparse matrices efficiently."], "id": 19}
{"category": "Data Science and ML", "difficulty_level": "hard", "content": "Create a model evaluation dashboard with ROC curves, confusion matrices, and precision-recall curves", "requirements": ["Generate ROC and precision-recall curves for binary classifiers.", "Display confusion matrices with key metrics.", "Support visualization of multiple models on the same dashboard.", "Include functionality to export results as images or reports."], "id": 20}
{"category": "Algorithm and Data Structure", "difficulty_level": "easy", "content": "Implement a function to find the maximum and minimum values in an array", "requirements": ["Traverse the array to find both maximum and minimum values.", "Handle edge cases like empty arrays or non-numeric values.", "Optimize the solution to minimize the number of comparisons.", "Include unit tests for the function."], "id": 21}
{"category": "Algorithm and Data Structure", "difficulty_level": "easy", "content": "Create a function to reverse a string using an array", "requirements": ["Reverse the string by swapping characters in an array.", "Handle input strings of varying lengths.", "Ensure the function works for empty strings.", "Provide unit tests to validate the functionality."], "id": 22}
{"category": "Algorithm and Data Structure", "difficulty_level": "easy", "content": "Implement linear search in an array", "requirements": ["Traverse the array to search for a target value.", "Return the index of the target value if found, else return -1.", "Handle cases where the array is empty.", "Include unit tests for various edge cases."], "id": 23}
{"category": "Algorithm and Data Structure", "difficulty_level": "easy", "content": "Create a function to check if brackets are balanced in a string", "requirements": ["Support brackets: (), {}, [].", "Use a stack data structure for efficient checking.", "Handle edge cases like empty strings or mismatched brackets.", "Include unit tests with diverse input cases."], "id": 24}
{"category": "Algorithm and Data Structure", "difficulty_level": "easy", "content": "Implement bubble sort algorithm", "requirements": ["Sort an array of numbers in ascending order using bubble sort.", "Optimize by stopping early if no swaps are made in a pass.", "Handle edge cases like empty arrays or single-element arrays.", "Include unit tests for sorted, unsorted, and reverse-sorted arrays."], "id": 25}
{"category": "Algorithm and Data Structure", "difficulty_level": "easy", "content": "Create a simple queue with enqueue and dequeue operations", "requirements": ["Implement the queue using an array or linked list.", "Provide functions for enqueue, dequeue, and checking if the queue is empty.", "Ensure the queue follows First In First Out (FIFO) principle.", "Include unit tests for queue operations."], "id": 26}
{"category": "Algorithm and Data Structure", "difficulty_level": "easy", "content": "Implement a stack with push and pop operations", "requirements": ["Implement the stack using an array or linked list.", "Provide functions for push, pop, and checking if the stack is empty.", "Ensure the stack follows Last In First Out (LIFO) principle.", "Include unit tests for stack operations."], "id": 27}
{"category": "Algorithm and Data Structure", "difficulty_level": "medium", "content": "Create a function to merge two sorted arrays", "requirements": ["Merge two sorted arrays into a single sorted array.", "Handle cases where one or both arrays are empty.", "Optimize for time complexity O(n).", "Include unit tests for edge cases and normal scenarios."], "id": 28}
{"category": "Algorithm and Data Structure", "difficulty_level": "medium", "content": "Implement binary search on a sorted array", "requirements": ["Search for a target value in a sorted array using binary search.", "Return the index of the target value if found, else return -1.", "Handle edge cases like empty arrays.", "Include unit tests for boundary values and normal scenarios."], "id": 29}
{"category": "Algorithm and Data Structure", "difficulty_level": "medium", "content": "Build a singly linked list with insertion and deletion", "requirements": ["Implement a singly linked list with functions for insertion and deletion.", "Support insertion at the beginning, end, and specific index.", "Ensure proper handling of edge cases like empty lists or invalid indexes.", "Include unit tests for linked list operations."], "id": 30}
{"category": "Algorithm and Data Structure", "difficulty_level": "medium", "content": "Create a function to find the first non-repeating character in a string", "requirements": ["Identify the first character that does not repeat in the string.", "Optimize for time complexity using a single pass or hash map.", "Handle edge cases like empty strings or strings with all repeating characters.", "Include unit tests with diverse input strings."], "id": 31}
{"category": "Algorithm and Data Structure", "difficulty_level": "medium", "content": "Implement selection sort algorithm", "requirements": ["Sort an array of numbers in ascending order using selection sort.", "Iteratively find the minimum element and place it in the correct position.", "Handle edge cases like empty arrays or single-element arrays.", "Include unit tests for sorted, unsorted, and reverse-sorted arrays."], "id": 32}
{"category": "Algorithm and Data Structure", "difficulty_level": "medium", "content": "Create a function to check if two strings are anagrams", "requirements": ["Check if two input strings are anagrams of each other.", "Ignore case and non-alphanumeric characters during comparison.", "Optimize for time complexity using hash maps.", "Include unit tests with diverse string pairs."], "id": 33}
{"category": "Algorithm and Data Structure", "difficulty_level": "medium", "content": "Implement a simple hash table with basic insert and get operations", "requirements": ["Implement a hash table with collision handling (e.g., chaining or open addressing).", "Provide functions for inserting and retrieving values.", "Ensure the hash table works efficiently with large data sets.", "Include unit tests for common operations and edge cases."], "id": 34}
{"category": "Algorithm and Data Structure", "difficulty_level": "hard", "content": "Create a basic binary search tree with insertion and search", "requirements": ["Implement a binary search tree supporting insertion and search operations.", "Ensure the tree maintains binary search tree properties.", "Handle edge cases like empty trees.", "Include unit tests for tree operations."], "id": 35}
{"category": "Algorithm and Data Structure", "difficulty_level": "hard", "content": "Implement merge sort algorithm", "requirements": ["Sort an array of numbers in ascending order using merge sort.", "Divide the array into halves recursively and merge sorted halves.", "Optimize for time complexity O(n log n).", "Include unit tests for diverse input arrays."], "id": 36}
{"category": "Algorithm and Data Structure", "difficulty_level": "hard", "content": "Build a priority queue using an array", "requirements": ["Implement a priority queue where elements are dequeued by priority.", "Provide functions for enqueue, dequeue, and peeking at the highest priority.", "Optimize insertion and deletion operations.", "Include unit tests for priority queue functionality."], "id": 37}
{"category": "Algorithm and Data Structure", "difficulty_level": "hard", "content": "Create a function to detect a cycle in a linked list", "requirements": ["Detect if a cycle exists in a singly linked list.", "Use Floyd\u2019s Cycle Detection Algorithm for optimal time and space complexity.", "Handle edge cases like empty lists or single-node lists.", "Include unit tests with lists having cycles and no cycles."], "id": 38}
{"category": "Algorithm and Data Structure", "difficulty_level": "hard", "content": "Implement breadth-first search on a simple graph", "requirements": ["Traverse a graph using breadth-first search starting from a given node.", "Support graphs represented as adjacency lists.", "Handle edge cases like disconnected graphs.", "Include unit tests for diverse graph structures."], "id": 39}
{"category": "Algorithm and Data Structure", "difficulty_level": "hard", "content": "Create a trie for storing and searching simple words", "requirements": ["Implement a trie with insert and search operations.", "Support storing and searching simple lowercase words.", "Optimize for space usage and search efficiency.", "Include unit tests for trie operations."], "id": 40}
{"category": "Web", "difficulty_level": "easy", "content": "Create a personal profile page with HTML (name, photo, about me)", "requirements": ["Design a simple HTML page with a section for name, photo, and a short 'about me' description.", "Ensure the page structure is semantic (use appropriate tags like <header>, <section>, etc.).", "Add inline styles to format the layout.", "Test the page in at least one web browser."], "id": 41}
{"category": "Web", "difficulty_level": "easy", "content": "Style a button with hover effects using CSS", "requirements": ["Create a basic button using HTML.", "Use CSS to style the button with colors, borders, and padding.", "Implement hover effects to change the button\u2019s appearance when the cursor hovers over it.", "Ensure the button is responsive and works in modern browsers."], "id": 42}
{"category": "Web", "difficulty_level": "easy", "content": "Build a simple header with logo and menu items", "requirements": ["Create a header section with a logo (image or text) and a navigation menu.", "Style the header using CSS to align the logo and menu horizontally.", "Ensure the menu items are clickable links.", "Make the header responsive for smaller screens."], "id": 43}
{"category": "Web", "difficulty_level": "easy", "content": "Create a contact form with basic HTML fields", "requirements": ["Design a contact form with fields for name, email, message, and a submit button.", "Ensure all fields are properly labeled for accessibility.", "Use appropriate input types for each field (e.g., email for email address).", "Include placeholder text for each input field."], "id": 44}
{"category": "Web", "difficulty_level": "easy", "content": "Implement a footer with social media links", "requirements": ["Design a footer section with links to at least three social media platforms.", "Use appropriate icons or text for the links.", "Style the footer to remain at the bottom of the page.", "Ensure the links open in a new tab when clicked."], "id": 45}
{"category": "Web", "difficulty_level": "easy", "content": "Make a responsive image gallery using CSS flexbox", "requirements": ["Create an image gallery with at least six images.", "Use CSS flexbox to align images in a grid layout.", "Ensure the gallery is responsive and adjusts based on screen size.", "Add hover effects to enlarge images slightly."], "id": 46}
{"category": "Web", "difficulty_level": "easy", "content": "Build a pricing table using HTML and CSS", "requirements": ["Design a table with at least three pricing tiers.", "Use CSS to style the table with borders, colors, and padding.", "Highlight one pricing tier as the most popular.", "Ensure the table is responsive on smaller screens."], "id": 47}
{"category": "Web", "difficulty_level": "medium", "content": "Create a counter button that increments/decrements using JavaScript", "requirements": ["Add two buttons for incrementing and decrementing a counter.", "Display the current counter value on the page.", "Use JavaScript to update the counter value dynamically.", "Include validation to prevent the counter from going below zero."], "id": 48}
{"category": "Web", "difficulty_level": "medium", "content": "Build a simple todo list (add items only)", "requirements": ["Create an input field and a button to add new items to the list.", "Use JavaScript to dynamically add items to the list.", "Ensure the list updates in real time when new items are added.", "Style the list using basic CSS."], "id": 49}
{"category": "Web", "difficulty_level": "medium", "content": "Implement a dark/light theme switcher", "requirements": ["Add a toggle button to switch between dark and light themes.", "Use JavaScript to dynamically change the CSS styles.", "Persist the selected theme using local storage.", "Ensure the page loads with the previously selected theme."], "id": 50}
{"category": "Web", "difficulty_level": "medium", "content": "Create a form that shows success message on submit", "requirements": ["Design a form with fields for name, email, and a submit button.", "Use JavaScript to display a success message when the form is submitted.", "Prevent the default form submission behavior.", "Style the success message to stand out visually."], "id": 51}
{"category": "Web", "difficulty_level": "medium", "content": "Build an accordion menu with expanding/collapsing sections", "requirements": ["Create a menu with at least three sections that can expand or collapse.", "Use JavaScript to toggle visibility when a section is clicked.", "Ensure only one section is expanded at a time.", "Style the menu for readability and responsiveness."], "id": 52}
{"category": "Web", "difficulty_level": "medium", "content": "Make a simple image slider (manual navigation)", "requirements": ["Add at least three images to the slider.", "Include navigation controls to switch between images manually.", "Use JavaScript to handle the image transitions.", "Style the slider with CSS for a clean look."], "id": 53}
{"category": "Web", "difficulty_level": "medium", "content": "Create a responsive navigation menu with hamburger icon for mobile", "requirements": ["Design a navigation menu with links to at least four sections.", "Add a hamburger icon for mobile devices.", "Use JavaScript to toggle the menu visibility on click.", "Ensure the menu is responsive and works on all screen sizes."], "id": 54}
{"category": "Web", "difficulty_level": "hard", "content": "Build a calculator with basic operations", "requirements": ["Create a calculator interface with buttons for numbers and operators (+, -, *, /).", "Use JavaScript to perform the calculations dynamically.", "Display the calculation result in a dedicated area.", "Handle edge cases like division by zero."], "id": 55}
{"category": "Web", "difficulty_level": "hard", "content": "Implement a simple form validation using JavaScript", "requirements": ["Create a form with fields for name, email, and password.", "Validate the inputs for required fields, valid email format, and password length (minimum 8 characters).", "Display error messages for invalid inputs dynamically.", "Prevent form submission until all inputs are valid."], "id": 56}
{"category": "Web", "difficulty_level": "hard", "content": "Create a memory card matching game", "requirements": ["Design a grid with cards that have matching pairs.", "Use JavaScript to flip cards on click and check for matches.", "Track the number of attempts made by the player.", "Add a reset button to restart the game."], "id": 57}
{"category": "Web", "difficulty_level": "hard", "content": "Build a countdown timer for an event", "requirements": ["Allow the user to input the target date and time.", "Display the remaining time in days, hours, minutes, and seconds.", "Update the countdown dynamically using JavaScript.", "Show a message when the countdown reaches zero."], "id": 58}
{"category": "Web", "difficulty_level": "hard", "content": "Make a simple weather display page using a free API", "requirements": ["Fetch weather data using a free weather API (e.g., OpenWeatherMap).", "Allow the user to search for the weather of a specific city.", "Display the temperature, weather condition, and an icon.", "Handle errors such as invalid city names gracefully."], "id": 59}
{"category": "Web", "difficulty_level": "hard", "content": "Create a to-do list with local storage", "requirements": ["Allow the user to add, delete, and mark tasks as complete.", "Persist the to-do list in the browser's local storage.", "Retrieve and display the tasks from local storage on page load.", "Style the to-do list for better user experience."], "id": 60}
{"category": "Database SQL", "difficulty_level": "easy", "content": "Write a query to select all columns from a table and limit to first 10 rows", "requirements": ["Use the SQL SELECT statement to select all columns.", "Include a LIMIT or equivalent clause to restrict the results to the first 10 rows.", "Ensure the query runs on any table structure.", "Test the query on a sample table."], "id": 61}
{"category": "Database SQL", "difficulty_level": "easy", "content": "Create a simple table with columns for user information (id, name, email, age)", "requirements": ["Write an SQL CREATE TABLE statement.", "Define appropriate data types for each column.", "Set the 'id' column as the primary key.", "Ensure the table structure supports typical user data."], "id": 62}
{"category": "Database SQL", "difficulty_level": "easy", "content": "Write an INSERT statement to add a new record to a user table", "requirements": ["Use the SQL INSERT INTO statement to add a record.", "Ensure all required fields in the user table are included.", "Test the query with valid sample data.", "Handle errors like missing or invalid data gracefully."], "id": 63}
{"category": "Database SQL", "difficulty_level": "easy", "content": "Create a query to count total number of records in a table", "requirements": ["Use the SQL COUNT function to count the total records.", "Test the query on a sample table with multiple records.", "Ensure the query works regardless of table size.", "Format the output to display only the count value."], "id": 64}
{"category": "Database SQL", "difficulty_level": "easy", "content": "Write a query to find all users older than 25", "requirements": ["Use the SQL SELECT statement with a WHERE clause.", "Filter the records to include only users older than 25.", "Ensure the query works with any table structure containing an age column.", "Test the query on a sample table with diverse age data."], "id": 65}
{"category": "Database SQL", "difficulty_level": "easy", "content": "Update a user's email address in the table", "requirements": ["Use the SQL UPDATE statement to modify the email field.", "Specify the user to update using a WHERE clause.", "Ensure the query updates only the intended record.", "Test the query on a sample table with user data."], "id": 66}
{"category": "Database SQL", "difficulty_level": "medium", "content": "Write a query to find duplicate records in a table", "requirements": ["Identify duplicate records based on one or more columns.", "Use GROUP BY and HAVING clauses to filter duplicates.", "Test the query on a table with and without duplicates.", "Ensure the query works for large datasets efficiently."], "id": 67}
{"category": "Database SQL", "difficulty_level": "medium", "content": "Create a query to join two tables (users and orders) and display user details with their orders", "requirements": ["Use SQL JOIN to combine data from 'users' and 'orders' tables.", "Select relevant columns from both tables.", "Handle cases where a user has no orders (e.g., use LEFT JOIN).", "Test the query on sample tables with varied data."], "id": 68}
{"category": "Database SQL", "difficulty_level": "medium", "content": "Write a query to calculate average order amount by user", "requirements": ["Use the SQL AVG function to calculate the average order amount.", "Group the results by user to display per-user averages.", "Test the query on a table with diverse order amounts.", "Handle edge cases like users with no orders."], "id": 69}
{"category": "Database SQL", "difficulty_level": "medium", "content": "Create a query to find the most recent order for each user", "requirements": ["Use SQL functions like MAX or ROW_NUMBER to find the most recent orders.", "Group the results by user to display one record per user.", "Test the query on a table with multiple orders per user.", "Ensure the query works efficiently for large datasets."], "id": 70}
{"category": "Database SQL", "difficulty_level": "medium", "content": "Write a query to rank users by their total purchase amount", "requirements": ["Use SQL window functions like RANK or DENSE_RANK.", "Calculate the total purchase amount for each user.", "Order the results in descending order of total purchase amount.", "Test the query on a dataset with varied purchase amounts."], "id": 71}
{"category": "Database SQL", "difficulty_level": "medium", "content": "Create a view that shows user order history", "requirements": ["Use the SQL CREATE VIEW statement.", "Combine user details and order history into a single view.", "Ensure the view is updatable with changes in the source tables.", "Test the view on sample tables with multiple users and orders."], "id": 72}
{"category": "Database SQL", "difficulty_level": "medium", "content": "Write a query using GROUP BY and HAVING to find users who placed more than 3 orders", "requirements": ["Use GROUP BY to aggregate orders by user.", "Include a HAVING clause to filter users with more than 3 orders.", "Test the query on a dataset with varied order counts per user.", "Ensure the query works efficiently for large datasets."], "id": 73}
{"category": "Database SQL", "difficulty_level": "medium", "content": "Create a query to display orders within a specific date range", "requirements": ["Use the SQL WHERE clause with BETWEEN to filter orders.", "Allow input for the start and end dates.", "Ensure the query works for any valid date range.", "Test the query on a dataset with diverse order dates."], "id": 74}
{"category": "Database SQL", "difficulty_level": "hard", "content": "Write a query using window functions to calculate month-over-month order growth", "requirements": ["Use SQL window functions like LAG to compare order amounts.", "Group the results by month and user (or overall).", "Calculate the percentage growth between months.", "Test the query on a dataset with multiple months of order data."], "id": 75}
{"category": "Database SQL", "difficulty_level": "hard", "content": "Create a query to find users who made purchases in consecutive months", "requirements": ["Use SQL window functions to identify consecutive months.", "Filter the results to include only users meeting the criteria.", "Test the query on a dataset with purchases spanning multiple months.", "Optimize the query for large datasets with many users."], "id": 76}
{"category": "Database SQL", "difficulty_level": "hard", "content": "Write a query to identify products frequently bought together", "requirements": ["Use SQL JOIN or self-join to find products in the same order.", "Group the results by product pairs and count the occurrences.", "Filter pairs that appear above a specified threshold.", "Test the query on a dataset with varied order data."], "id": 77}
{"category": "Database SQL", "difficulty_level": "hard", "content": "Create a stored procedure to calculate customer lifetime value", "requirements": ["Write a stored procedure to calculate total purchase value for each customer.", "Include inputs for the time range to consider.", "Store the results in a separate table or return them as output.", "Test the procedure on a dataset with multiple customers and transactions."], "id": 78}
{"category": "Database SQL", "difficulty_level": "hard", "content": "Write a query to generate a customer segmentation based on purchase behavior", "requirements": ["Use SQL CASE or clustering logic to categorize customers (e.g., high, medium, low spenders).", "Include conditions for segmentation based on purchase amounts.", "Ensure the segmentation logic is flexible and adjustable.", "Test the query on a dataset with diverse customer behaviors."], "id": 79}
{"category": "Database SQL", "difficulty_level": "hard", "content": "Create a trigger to update inventory after each order", "requirements": ["Write a trigger that executes after an INSERT operation on the orders table.", "Reduce the inventory count in the products table for the ordered items.", "Handle edge cases like insufficient inventory levels.", "Test the trigger on a dataset with various orders and inventory levels."], "id": 80}
{"category": "Application Design", "difficulty_level": "easy", "content": "Design a calculator app with basic operations (+, -, *, /)", "requirements": ["Create a user interface with buttons for numbers and operations.", "Display the calculation result in a dedicated output area.", "Implement functionality for basic arithmetic operations.", "Ensure the app is responsive and user-friendly."], "id": 81}
{"category": "Application Design", "difficulty_level": "easy", "content": "Create a design for a simple address book that stores name and phone number", "requirements": ["Design a user interface to add, view, and search for contacts.", "Include fields for name and phone number.", "Provide options to edit or delete a contact.", "Ensure the design is intuitive and responsive."], "id": 82}
{"category": "Application Design", "difficulty_level": "easy", "content": "Design a basic notepad application that can create and save text notes", "requirements": ["Create a user interface to type and save notes.", "Include options to view, edit, or delete notes.", "Provide functionality to search for specific notes.", "Ensure the design is simple and functional."], "id": 83}
{"category": "Application Design", "difficulty_level": "easy", "content": "Create a design for a weather display app that shows temperature and conditions", "requirements": ["Design an interface to display current weather details.", "Include fields for city search and display temperature, humidity, and conditions.", "Use icons or visuals to represent weather conditions.", "Ensure the app design is clean and responsive."], "id": 84}
{"category": "Application Design", "difficulty_level": "medium", "content": "Design a simple timer app with start, pause, and reset functions", "requirements": ["Create a user interface with buttons for start, pause, and reset.", "Display the elapsed time in a digital clock format.", "Ensure smooth functionality for pausing and resuming the timer.", "Make the app responsive and visually appealing."], "id": 85}
{"category": "Application Design", "difficulty_level": "medium", "content": "Create a design for a basic expense tracker that records spending", "requirements": ["Design an interface to add, view, and categorize expenses.", "Include fields for amount, date, category, and description.", "Provide a summary view showing total spending by category.", "Ensure the design is user-friendly and supports mobile screens."], "id": 86}
{"category": "Application Design", "difficulty_level": "medium", "content": "Design a simple photo gallery app that displays images in a grid", "requirements": ["Create a grid layout for displaying images.", "Allow users to click an image to view it in full size.", "Provide navigation options to browse through images.", "Ensure the app design is responsive and optimized for different screen sizes."], "id": 87}
{"category": "Application Design", "difficulty_level": "hard", "content": "Create a design for a basic quiz app with multiple choice questions", "requirements": ["Design an interface to display a question and multiple choice answers.", "Include a progress bar showing the user's progress through the quiz.", "Provide feedback on correct or incorrect answers.", "Ensure the design is clean, intuitive, and adaptable to various screen sizes."], "id": 88}
{"category": "Application Design", "difficulty_level": "hard", "content": "Design a simple todo list with only add and delete functions", "requirements": ["Create an interface to add new tasks to the list.", "Allow users to delete tasks from the list.", "Display tasks in a clear, readable format.", "Ensure the design is minimalist and easy to navigate."], "id": 89}
{"category": "Application Design", "difficulty_level": "hard", "content": "Create a design for a basic music player with play, pause, and skip", "requirements": ["Design an interface with buttons for play, pause, skip, and previous.", "Include a progress bar to show the current position of the track.", "Display the track name and artist information.", "Ensure the design is visually appealing and responsive."], "id": 90}
{"category": "Game", "difficulty_level": "easy", "content": "Create a number guessing game where player guesses a number between 1-100", "requirements": ["Generate a random number between 1 and 100.", "Allow the player to input guesses and provide feedback (e.g., too high, too low).", "Track the number of attempts made by the player.", "Display a success message when the correct number is guessed."], "id": 91}
{"category": "Game", "difficulty_level": "easy", "content": "Build a rock-paper-scissors game against computer", "requirements": ["Allow the player to choose rock, paper, or scissors.", "Generate a random choice for the computer.", "Determine the winner based on the standard rules of the game.", "Display the results of each round and the overall winner."], "id": 92}
{"category": "Game", "difficulty_level": "easy", "content": "Implement a simple coin flip game with win/loss counter", "requirements": ["Simulate a coin flip (heads or tails) randomly.", "Allow the player to guess the outcome.", "Track the player's wins and losses.", "Display the results of each flip and the total score."], "id": 93}
{"category": "Game", "difficulty_level": "medium", "content": "Create a memory card matching game with 4x4 grid", "requirements": ["Design a 4x4 grid of cards with pairs of matching images or symbols.", "Allow cards to be flipped on click and check for matches.", "Keep track of the player's score and number of attempts.", "Include a restart button to reset the game."], "id": 94}
{"category": "Game", "difficulty_level": "medium", "content": "Build a simple snake game where snake moves in four directions", "requirements": ["Design a 2D grid where the snake moves and eats food.", "Make the snake grow longer when it eats food.", "End the game if the snake collides with itself or the boundaries.", "Allow the player to control the snake using arrow keys."], "id": 95}
{"category": "Game", "difficulty_level": "medium", "content": "Implement a basic tic-tac-toe game for two players", "requirements": ["Create a 3x3 grid for the game board.", "Allow two players to take turns marking X or O on the grid.", "Detect and announce the winner or a draw.", "Provide an option to restart the game."], "id": 96}
{"category": "Game", "difficulty_level": "medium", "content": "Create a whack-a-mole game with simple scoring system", "requirements": ["Display a grid with randomly appearing moles.", "Allow the player to click on moles to score points.", "Track the player's score and time remaining.", "End the game after a fixed duration and display the final score."], "id": 97}
{"category": "Game", "difficulty_level": "hard", "content": "Build a basic ping pong game with simple AI opponent", "requirements": ["Create a 2D game board with paddles and a ball.", "Allow the player to control one paddle and play against a simple AI.", "Implement collision detection for paddles and boundaries.", "Track and display the score for both the player and the AI."], "id": 98}
{"category": "Game", "difficulty_level": "hard", "content": "Implement a simple 2D maze game with keyboard controls", "requirements": ["Design a 2D maze with a start and end point.", "Allow the player to navigate the maze using arrow keys.", "Detect and prevent movement through walls.", "Display a success message when the player reaches the end."], "id": 99}
{"category": "Game", "difficulty_level": "hard", "content": "Create a basic tetris game with only straight blocks", "requirements": ["Design a Tetris game board with falling straight blocks.", "Allow the player to move blocks left, right, and down, and rotate them.", "Clear lines when they are completely filled.", "Track and display the player's score."], "id": 100}